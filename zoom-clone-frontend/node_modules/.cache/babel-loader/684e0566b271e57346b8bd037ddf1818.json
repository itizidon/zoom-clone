{"ast":null,"code":"var _jsxFileName = \"/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Rooms.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { withRouter } from 'react-router';\nconst socket = io('http://localhost:8000');\nlet mediaConstraints = {\n  audio: true,\n  // We want an audio track\n  video: {\n    width: 250,\n    height: 250\n  } // ...and we want a video track\n\n};\nvar displayMediaOptions = {\n  video: {\n    cursor: 'always'\n  },\n  audio: false\n};\nlet myPeerConnection;\nlet userStream;\nlet sentTracks = [];\n\nfunction Rooms(props) {\n  const userVideo = useRef();\n  const [allVideos, setAllVideos] = useState({\n    listOfStreams: [React.createRef()],\n    curState: true\n  });\n  const [toggle, setToggle] = useState(true);\n  const [revert, setRevert] = useState(true);\n  const [names, setNames] = useState([]);\n  const [linkToggle, setLinkToggle] = useState(true);\n  useEffect(() => {\n    navigator.clipboard.writeText(`http://localhost:3000/rooms/${props.match.params.id}`);\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz;\n      userStream = streamz;\n    });\n    socket.on('connectToRoom', () => {\n      joinroom();\n    });\n    socket.on('changedNames', (name, index) => {\n      setNames(oldArray => {\n        let newArray = [...oldArray];\n        newArray[index] = name;\n        return newArray;\n      });\n    });\n    socket.on('makeConnection', () => {\n      userStream.getTracks().forEach(track => sentTracks.push(myPeerConnection.addTrack(track, userStream)));\n    });\n    socket.on('handle-new-ice-candidate', candidate => {\n      if (candidate) {\n        const newCandidate = new RTCIceCandidate(candidate);\n        myPeerConnection.addIceCandidate(newCandidate);\n      }\n    });\n    socket.on('handle-answer-to-room', createdAnswer => {\n      const desc = new RTCSessionDescription(createdAnswer);\n      myPeerConnection.setRemoteDescription(desc);\n    });\n    socket.on('handle-offer-to-room', createdOffer => {\n      createPeerConnection();\n      var desc = new RTCSessionDescription(createdOffer);\n      myPeerConnection.setRemoteDescription(desc).then(stream => {\n        userStream.getTracks().forEach(track => {\n          sentTracks.push(myPeerConnection.addTrack(track, userStream));\n          return 'return';\n        });\n      }).then(() => {\n        return myPeerConnection.createAnswer();\n      }).then(function (answer) {\n        return myPeerConnection.setLocalDescription(answer);\n      }).then(() => {\n        socket.emit('video-answer-to-room', {\n          roomNum: props.match.params.id,\n          sdp: myPeerConnection.localDescription\n        });\n      });\n    });\n  }, []);\n\n  function disconnect() {\n    if (myPeerConnection) {\n      myPeerConnection.ontrack = null;\n      myPeerConnection.onremovetrack = null;\n      myPeerConnection.onremovestream = null;\n      myPeerConnection.onicecandidate = null;\n      myPeerConnection.oniceconnectionstatechange = null;\n      myPeerConnection.onsignalingstatechange = null;\n      myPeerConnection.onicegatheringstatechange = null;\n      myPeerConnection.onnegotiationneeded = null;\n      allVideos.listOfStreams.map(cur => {\n        if (cur.current.srcObject) {\n          cur.current.srcObject.getTracks().forEach(track => track.stop());\n        }\n      });\n      myPeerConnection.close();\n      myPeerConnection = null;\n    }\n  }\n\n  function handleTrackEvent(event) {\n    setAllVideos(oldArray => {\n      //if true\n      if (oldArray.curState) {\n        let newObj = {};\n        newObj.listOfStreams = oldArray.listOfStreams;\n        newObj.curState = false;\n        return newObj;\n      } else {\n        let newRef = React.createRef();\n        let newObj = {};\n        newObj.listOfStreams = oldArray.listOfStreams;\n        newObj.listOfStreams[newObj.listOfStreams.length - 1].current.srcObject = event.streams[0];\n        newObj.listOfStreams = [...oldArray.listOfStreams, newRef];\n        newObj.curState = true;\n        return newObj;\n      }\n    });\n  }\n\n  function createPeerConnection() {\n    myPeerConnection = new RTCPeerConnection({\n      iceServers: [{\n        urls: 'stun:stun3.l.google.com:19302'\n      }, {\n        urls: 'turn:numb.viagenie.ca',\n        credential: 'muazkh',\n        username: 'webrtc@live.com'\n      }],\n      sdpSemantics: 'unified-plan'\n    });\n    myPeerConnection.onicecandidate = handleICECandidateEvent;\n    myPeerConnection.ontrack = handleTrackEvent;\n    myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent;\n  }\n\n  function handleNegotiationNeededEvent() {\n    myPeerConnection.createOffer().then(function (offer) {\n      return myPeerConnection.setLocalDescription(offer);\n    }).then(() => {\n      socket.emit('video-offer-to-room', {\n        sdp: myPeerConnection.localDescription,\n        roomNum: props.match.params.id\n      });\n    });\n  }\n\n  function joinroom() {\n    createPeerConnection();\n  }\n\n  function handleICECandidateEvent(event) {\n    if (event.candidate) {\n      socket.emit('new-ice-candidate-to-room', {\n        roomNum: props.match.params.id,\n        candidate: event.candidate\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 5\n    }\n  }, linkToggle ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, \"Link Copied\", ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setLinkToggle(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, \"remove\"))) : null, toggle ? null : /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: event => {\n      event.preventDefault();\n      socket.emit('changeName', {\n        name: event.target.name.value,\n        roomNum: props.match.params.id\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    className: \"videocard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }\n  }), allVideos.listOfStreams.length >= 1 ? allVideos.listOfStreams.map((cur, indx) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: indx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }\n    }, names[indx]), /*#__PURE__*/React.createElement(\"video\", {\n      autoPlay: true,\n      ref: cur,\n      className: \"videocard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }\n    }));\n  }) : null, toggle ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"actions\",\n    onClick: () => {\n      socket.emit('connectToRooms', props.match.params.id);\n      setToggle(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, \"Connect\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }\n  }, revert ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"actions\",\n    onClick: () => {\n      navigator.mediaDevices.getDisplayMedia(displayMediaOptions).then(videoStream => {\n        let screenVideo = videoStream.getTracks()[0];\n        userVideo.current.srcObject = videoStream;\n        sentTracks.find(sender => {\n          return sender.track.kind === 'video';\n        }).replaceTrack(screenVideo);\n      });\n      setRevert(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }\n  }, \"Share Screen\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"actions\",\n    onClick: () => {\n      navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n        userVideo.current.srcObject = streamz;\n        userStream = streamz;\n        sentTracks.find(sender => {\n          return sender.track.kind === 'video';\n        }).replaceTrack(userStream.getTracks()[1]);\n      });\n      setRevert(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 15\n    }\n  }, \"Share Video\")), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"actions\",\n    onClick: () => {\n      disconnect();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 11\n    }\n  }, \"Disconnect\")));\n}\n\nexport default withRouter(Rooms);","map":{"version":3,"sources":["/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Rooms.js"],"names":["React","useEffect","useRef","useState","io","withRouter","socket","mediaConstraints","audio","video","width","height","displayMediaOptions","cursor","myPeerConnection","userStream","sentTracks","Rooms","props","userVideo","allVideos","setAllVideos","listOfStreams","createRef","curState","toggle","setToggle","revert","setRevert","names","setNames","linkToggle","setLinkToggle","navigator","clipboard","writeText","match","params","id","mediaDevices","getUserMedia","then","streamz","current","srcObject","on","joinroom","name","index","oldArray","newArray","getTracks","forEach","track","push","addTrack","candidate","newCandidate","RTCIceCandidate","addIceCandidate","createdAnswer","desc","RTCSessionDescription","setRemoteDescription","createdOffer","createPeerConnection","stream","createAnswer","answer","setLocalDescription","emit","roomNum","sdp","localDescription","disconnect","ontrack","onremovetrack","onremovestream","onicecandidate","oniceconnectionstatechange","onsignalingstatechange","onicegatheringstatechange","onnegotiationneeded","map","cur","stop","close","handleTrackEvent","event","newObj","newRef","length","streams","RTCPeerConnection","iceServers","urls","credential","username","sdpSemantics","handleICECandidateEvent","handleNegotiationNeededEvent","createOffer","offer","preventDefault","target","value","indx","getDisplayMedia","videoStream","screenVideo","find","sender","kind","replaceTrack"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport io from 'socket.io-client'\nimport { withRouter } from 'react-router'\n\nconst socket = io('http://localhost:8000')\n\nlet mediaConstraints = {\n  audio: true, // We want an audio track\n  video: { width: 250, height: 250 } // ...and we want a video track\n}\n\nvar displayMediaOptions = {\n  video: {\n    cursor: 'always'\n  },\n  audio: false\n}\n\nlet myPeerConnection\nlet userStream\nlet sentTracks = []\n\nfunction Rooms(props) {\n  const userVideo = useRef()\n  const [allVideos, setAllVideos] = useState({\n    listOfStreams: [React.createRef()],\n    curState: true\n  })\n  const [toggle, setToggle] = useState(true)\n  const [revert, setRevert] = useState(true)\n  const [names, setNames] = useState([])\n  const [linkToggle, setLinkToggle] = useState(true)\n\n  useEffect(() => {\n    navigator.clipboard.writeText(\n      `http://localhost:3000/rooms/${props.match.params.id}`\n    )\n\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz\n      userStream = streamz\n    })\n\n    socket.on('connectToRoom', () => {\n      joinroom()\n    })\n\n    socket.on('changedNames', (name, index) => {\n      setNames(oldArray => {\n        let newArray = [...oldArray]\n        newArray[index] = name\n        return newArray\n      })\n    })\n\n    socket.on('makeConnection', () => {\n      userStream\n        .getTracks()\n        .forEach(track =>\n          sentTracks.push(myPeerConnection.addTrack(track, userStream))\n        )\n    })\n\n    socket.on('handle-new-ice-candidate', candidate => {\n      if (candidate) {\n        const newCandidate = new RTCIceCandidate(candidate)\n        myPeerConnection.addIceCandidate(newCandidate)\n      }\n    })\n\n    socket.on('handle-answer-to-room', createdAnswer => {\n      const desc = new RTCSessionDescription(createdAnswer)\n      myPeerConnection.setRemoteDescription(desc)\n    })\n\n    socket.on('handle-offer-to-room', createdOffer => {\n      createPeerConnection()\n      var desc = new RTCSessionDescription(createdOffer)\n\n      myPeerConnection\n        .setRemoteDescription(desc)\n        .then(stream => {\n          userStream.getTracks().forEach(track => {\n            sentTracks.push(myPeerConnection.addTrack(track, userStream))\n            return 'return'\n          })\n        })\n        .then(() => {\n          return myPeerConnection.createAnswer()\n        })\n        .then(function(answer) {\n          return myPeerConnection.setLocalDescription(answer)\n        })\n        .then(() => {\n          socket.emit('video-answer-to-room', {\n            roomNum: props.match.params.id,\n            sdp: myPeerConnection.localDescription\n          })\n        })\n    })\n  }, [])\n\n  function disconnect() {\n    if (myPeerConnection) {\n      myPeerConnection.ontrack = null\n      myPeerConnection.onremovetrack = null\n      myPeerConnection.onremovestream = null\n      myPeerConnection.onicecandidate = null\n      myPeerConnection.oniceconnectionstatechange = null\n      myPeerConnection.onsignalingstatechange = null\n      myPeerConnection.onicegatheringstatechange = null\n      myPeerConnection.onnegotiationneeded = null\n\n      allVideos.listOfStreams.map(cur => {\n        if (cur.current.srcObject) {\n          cur.current.srcObject.getTracks().forEach(track => track.stop())\n        }\n      })\n\n      myPeerConnection.close()\n      myPeerConnection = null\n    }\n  }\n\n  function handleTrackEvent(event) {\n    setAllVideos(oldArray => {\n      //if true\n      if (oldArray.curState) {\n        let newObj = {}\n\n        newObj.listOfStreams = oldArray.listOfStreams\n        newObj.curState = false\n\n        return newObj\n      } else {\n        let newRef = React.createRef()\n        let newObj = {}\n\n        newObj.listOfStreams = oldArray.listOfStreams\n        newObj.listOfStreams[\n          newObj.listOfStreams.length - 1\n        ].current.srcObject = event.streams[0]\n\n        newObj.listOfStreams = [...oldArray.listOfStreams, newRef]\n        newObj.curState = true\n        return newObj\n      }\n    })\n  }\n\n  function createPeerConnection() {\n    myPeerConnection = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun3.l.google.com:19302' },\n        {\n          urls: 'turn:numb.viagenie.ca',\n          credential: 'muazkh',\n          username: 'webrtc@live.com'\n        }\n      ],\n      sdpSemantics: 'unified-plan'\n    })\n    myPeerConnection.onicecandidate = handleICECandidateEvent\n    myPeerConnection.ontrack = handleTrackEvent\n    myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent\n  }\n\n  function handleNegotiationNeededEvent() {\n    myPeerConnection\n      .createOffer()\n      .then(function(offer) {\n        return myPeerConnection.setLocalDescription(offer)\n      })\n      .then(() => {\n        socket.emit('video-offer-to-room', {\n          sdp: myPeerConnection.localDescription,\n          roomNum: props.match.params.id\n        })\n      })\n  }\n\n  function joinroom() {\n    createPeerConnection()\n  }\n\n  function handleICECandidateEvent(event) {\n    if (event.candidate) {\n      socket.emit('new-ice-candidate-to-room', {\n        roomNum: props.match.params.id,\n        candidate: event.candidate\n      })\n    }\n  }\n\n  return (\n    <div className=\"border\">\n      {linkToggle ? (\n        <div>\n          <h1>\n            Link Copied{' '}\n            <button\n              onClick={() => {\n                setLinkToggle(false)\n              }}\n            >\n              remove\n            </button>\n          </h1>\n        </div>\n      ) : null}\n      {toggle ? null : (\n        <form\n          onSubmit={event => {\n            event.preventDefault()\n            socket.emit('changeName', {\n              name: event.target.name.value,\n              roomNum: props.match.params.id\n            })\n          }}\n        >\n          <label>\n            <input type=\"text\" name=\"name\"></input>\n          </label>\n        </form>\n      )}\n\n      <video autoPlay ref={userVideo} className=\"videocard\"></video>\n\n      {allVideos.listOfStreams.length >= 1\n        ? allVideos.listOfStreams.map((cur, indx) => {\n            return (\n              <div key={indx}>\n                <p>{names[indx]}</p>\n                <video autoPlay ref={cur} className=\"videocard\"></video>\n              </div>\n            )\n          })\n        : null}\n      {toggle ? (\n        <button\n          className=\"actions\"\n          onClick={() => {\n            socket.emit('connectToRooms', props.match.params.id)\n\n            setToggle(false)\n          }}\n        >\n          Connect\n        </button>\n      ) : (\n        <div>\n          {revert ? (\n            <button\n              className=\"actions\"\n              onClick={() => {\n                navigator.mediaDevices\n                  .getDisplayMedia(displayMediaOptions)\n                  .then(videoStream => {\n                    let screenVideo = videoStream.getTracks()[0]\n                    userVideo.current.srcObject = videoStream\n                    sentTracks\n                      .find(sender => {\n                        return sender.track.kind === 'video'\n                      })\n                      .replaceTrack(screenVideo)\n                  })\n                setRevert(false)\n              }}\n            >\n              Share Screen\n            </button>\n          ) : (\n            <div>\n              <button\n                className=\"actions\"\n                onClick={() => {\n                  navigator.mediaDevices\n                    .getUserMedia(mediaConstraints)\n                    .then(streamz => {\n                      userVideo.current.srcObject = streamz\n                      userStream = streamz\n                      sentTracks\n                        .find(sender => {\n                          return sender.track.kind === 'video'\n                        })\n                        .replaceTrack(userStream.getTracks()[1])\n                    })\n                  setRevert(true)\n                }}\n              >\n                Share Video\n              </button>\n            </div>\n          )}\n          <button\n            className=\"actions\"\n            onClick={() => {\n              disconnect()\n            }}\n          >\n            Disconnect\n          </button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default withRouter(Rooms)\n"]},"metadata":{},"sourceType":"module"}
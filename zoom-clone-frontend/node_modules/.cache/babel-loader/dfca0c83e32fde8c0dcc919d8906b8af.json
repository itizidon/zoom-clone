{"ast":null,"code":"var _jsxFileName = \"/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Rooms.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { withRouter } from 'react-router';\nconst socket = io('http://localhost:8000');\nlet mediaConstraints = {\n  audio: true,\n  // We want an audio track\n  video: true // ...and we want a video track\n\n};\nlet userStream;\n\nfunction Rooms(props) {\n  const userVideo = useRef();\n  const otherStreams = useRef([]);\n  useEffect(() => {\n    socket.on('connectToRoom', () => {\n      joinroom();\n    });\n    socket.on('handle-video-answer', createdAnswer => {\n      const desc = new RTCSessionDescription(createdAnswer);\n      myPeerConnection.setRemoteDescription(desc);\n    });\n    socket.on('handle-offer-to-room', createdOffer => {\n      createPeerConnection();\n      var localStream;\n      var desc = new RTCSessionDescription(createdOffer);\n      myPeerConnection.setRemoteDescription(desc).then(() => {\n        return navigator.mediaDevices.getUserMedia(mediaConstraints);\n      }).then(stream => {\n        localStream = stream;\n        userVideo.current.srcObject = localStream;\n        localStream.getTracks().forEach(track => myPeerConnection.addTrack(track, localStream));\n      }).then(() => {\n        return myPeerConnection.createAnswer();\n      }).then(function (answer) {\n        return myPeerConnection.setLocalDescription(answer);\n      }).then(() => {\n        socket.emit('video-answer', {\n          roomNum: props.match.params.id,\n          sdp: myPeerConnection.localDescription\n        });\n      });\n    });\n  });\n\n  function handleTrackEvent(event) {\n    partnerVideo.current.srcObject = event.streams[0];\n  }\n\n  function createPeerConnection() {\n    myPeerConnection = new RTCPeerConnection({\n      iceServers: [{\n        urls: 'stun:stun3.l.google.com:19302'\n      }, {\n        urls: 'turn:numb.viagenie.ca',\n        credential: 'muazkh',\n        username: 'webrtc@live.com'\n      }]\n    });\n    myPeerConnection.onicecandidate = handleICECandidateEvent;\n    myPeerConnection.ontrack = handleTrackEvent;\n    myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent;\n  }\n\n  function handleNegotiationNeededEvent() {\n    myPeerConnection.createOffer().then(function (offer) {\n      return myPeerConnection.setLocalDescription(offer);\n    }).then(() => {\n      socket.emit('video-offer', {\n        sdp: myPeerConnection.localDescription,\n        roomNum: props.match.params.id\n      });\n    });\n  }\n\n  function joinroom() {\n    createPeerConnection();\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz;\n      userStream = streamz;\n      streamz.getTracks().forEach(track => myPeerConnection.addTrack(track, streamz));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      socket.emit('connectToRooms', props.match.params.id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, \"Connect\"));\n}\n\nexport default withRouter(Rooms);","map":{"version":3,"sources":["/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Rooms.js"],"names":["React","useEffect","useRef","useState","io","withRouter","socket","mediaConstraints","audio","video","userStream","Rooms","props","userVideo","otherStreams","on","joinroom","createdAnswer","desc","RTCSessionDescription","myPeerConnection","setRemoteDescription","createdOffer","createPeerConnection","localStream","then","navigator","mediaDevices","getUserMedia","stream","current","srcObject","getTracks","forEach","track","addTrack","createAnswer","answer","setLocalDescription","emit","roomNum","match","params","id","sdp","localDescription","handleTrackEvent","event","partnerVideo","streams","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","ontrack","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","offer","streamz"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport io from 'socket.io-client'\nimport { withRouter } from 'react-router'\n\nconst socket = io('http://localhost:8000')\n\nlet mediaConstraints = {\n  audio: true, // We want an audio track\n  video: true // ...and we want a video track\n}\n\nlet userStream\n\nfunction Rooms(props) {\n  const userVideo = useRef()\n  const otherStreams = useRef([])\n  useEffect(() => {\n    socket.on('connectToRoom', () => {\n      joinroom()\n    })\n\n    socket.on('handle-video-answer', createdAnswer => {\n      const desc = new RTCSessionDescription(createdAnswer)\n      myPeerConnection.setRemoteDescription(desc)\n    })\n\n    socket.on('handle-offer-to-room', createdOffer => {\n      createPeerConnection()\n      var localStream\n      var desc = new RTCSessionDescription(createdOffer)\n\n      myPeerConnection\n        .setRemoteDescription(desc)\n        .then(() => {\n          return navigator.mediaDevices.getUserMedia(mediaConstraints)\n        })\n        .then(stream => {\n          localStream = stream\n          userVideo.current.srcObject = localStream\n          localStream\n            .getTracks()\n            .forEach(track => myPeerConnection.addTrack(track, localStream))\n        })\n        .then(() => {\n          return myPeerConnection.createAnswer()\n        })\n        .then(function(answer) {\n          return myPeerConnection.setLocalDescription(answer)\n        })\n        .then(() => {\n          socket.emit('video-answer', {roomNum: props.match.params.id, sdp: myPeerConnection.localDescription})\n        })\n    })\n  })\n\n  function handleTrackEvent(event) {\n    partnerVideo.current.srcObject = event.streams[0]\n  }\n\n  function createPeerConnection() {\n    myPeerConnection = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun3.l.google.com:19302' },\n        {\n          urls: 'turn:numb.viagenie.ca',\n          credential: 'muazkh',\n          username: 'webrtc@live.com'\n        }\n      ]\n    })\n    myPeerConnection.onicecandidate = handleICECandidateEvent\n    myPeerConnection.ontrack = handleTrackEvent\n    myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent\n  }\n\n  function handleNegotiationNeededEvent() {\n    myPeerConnection\n      .createOffer()\n      .then(function(offer) {\n        return myPeerConnection.setLocalDescription(offer)\n      })\n      .then(() => {\n        socket.emit('video-offer', {\n          sdp: myPeerConnection.localDescription,\n          roomNum: props.match.params.id\n        })\n      })\n  }\n\n  function joinroom() {\n    createPeerConnection()\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz\n      userStream = streamz\n      streamz\n        .getTracks()\n        .forEach(track => myPeerConnection.addTrack(track, streamz))\n    })\n  }\n\n  return (\n    <div>\n      <video autoPlay ref={userVideo}></video>\n      <button\n        onClick={() => {\n          socket.emit('connectToRooms', props.match.params.id)\n        }}\n      >\n        Connect\n      </button>\n    </div>\n  )\n}\n\nexport default withRouter(Rooms)\n"]},"metadata":{},"sourceType":"module"}
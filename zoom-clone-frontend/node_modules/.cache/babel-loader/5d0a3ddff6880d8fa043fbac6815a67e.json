{"ast":null,"code":"var _jsxFileName = \"/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Rooms.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:8000');\nlet mediaConstraints = {\n  audio: true,\n  // We want an audio track\n  video: true // ...and we want a video track\n\n};\n\nfunction Rooms() {\n  const userVideo = useRef();\n  const otherStreams = useRef([]);\n  useEffect(() => {\n    socket.on('createConnection', () => {\n      userStream.getTracks().forEach(track => myPeerConnection.addTrack(track, userStream));\n    });\n  });\n\n  function joinroom() {\n    // createPeerConnection()\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz; // userStream = streamz\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 10\n    }\n  });\n}\n\nexport default Rooms;","map":{"version":3,"sources":["/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Rooms.js"],"names":["React","useEffect","useRef","useState","io","socket","mediaConstraints","audio","video","Rooms","userVideo","otherStreams","on","userStream","getTracks","forEach","track","myPeerConnection","addTrack","joinroom","navigator","mediaDevices","getUserMedia","then","streamz","current","srcObject"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,CAAjB;AAEA,IAAIE,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,IADc;AACR;AACbC,EAAAA,KAAK,EAAE,IAFc,CAET;;AAFS,CAAvB;;AAKA,SAASC,KAAT,GAAiB;AACf,QAAMC,SAAS,GAAGR,MAAM,EAAxB;AACA,QAAMS,YAAY,GAAGT,MAAM,CAAC,EAAD,CAA3B;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,MAAM,CAACO,EAAP,CAAU,kBAAV,EAA8B,MAAM;AAClCC,MAAAA,UAAU,CACPC,SADH,GAEGC,OAFH,CAEWC,KAAK,IAAIC,gBAAgB,CAACC,QAAjB,CAA0BF,KAA1B,EAAiCH,UAAjC,CAFpB;AAGD,KAJD;AAKD,GANQ,CAAT;;AAQA,WAASM,QAAT,GAAoB;AAClB;AACAC,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoChB,gBAApC,EAAsDiB,IAAtD,CAA2DC,OAAO,IAAI;AACpEd,MAAAA,SAAS,CAACe,OAAV,CAAkBC,SAAlB,GAA8BF,OAA9B,CADoE,CAEpE;AACD,KAHD;AAID;;AAED,sBAAO;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,GAAG,EAAEd,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;;AAED,eAAeD,KAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport io from 'socket.io-client'\n\nconst socket = io('http://localhost:8000')\n\nlet mediaConstraints = {\n  audio: true, // We want an audio track\n  video: true // ...and we want a video track\n}\n\nfunction Rooms() {\n  const userVideo = useRef()\n  const otherStreams = useRef([])\n  useEffect(() => {\n    socket.on('createConnection', () => {\n      userStream\n        .getTracks()\n        .forEach(track => myPeerConnection.addTrack(track, userStream))\n    })\n  })\n\n  function joinroom() {\n    // createPeerConnection()\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz\n      // userStream = streamz\n    })\n  }\n\n  return <video autoPlay ref={userVideo}></video>\n}\n\nexport default Rooms\n"]},"metadata":{},"sourceType":"module"}
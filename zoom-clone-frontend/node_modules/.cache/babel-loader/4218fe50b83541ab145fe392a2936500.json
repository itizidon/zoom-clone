{"ast":null,"code":"var _jsxFileName = \"/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Rooms.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { withRouter } from 'react-router';\nconst socket = io('http://localhost:8000');\nlet counter = 0;\nlet mediaConstraints = {\n  audio: true,\n  // We want an audio track\n  video: true // ...and we want a video track\n\n};\nlet allVideos = [];\nlet myPeerConnection;\nlet userStream;\n\nconst useCreateNewRef = event => {\n  let newVideo = {};\n  useEffect(() => {\n    newVideo[counter] = useRef();\n    newVideo.current.srcObject = event.streams[0];\n  });\n  return newVideo;\n};\n\nfunction Rooms(props) {\n  const userVideo = useRef();\n  const otherStreams = useRef([]);\n  const partnerVideo = useRef();\n  useEffect(() => {\n    socket.on('connectToRoom', () => {\n      joinroom();\n    });\n    socket.on('handle-new-ice-candidate', candidate => {\n      if (candidate) {\n        const newCandidate = new RTCIceCandidate(candidate);\n        myPeerConnection.addIceCandidate(newCandidate);\n      }\n    });\n    socket.on('handle-answer-to-room', createdAnswer => {\n      const desc = new RTCSessionDescription(createdAnswer);\n      myPeerConnection.setRemoteDescription(desc);\n    });\n    socket.on('handle-offer-to-room', createdOffer => {\n      console.log('handle-offer-room is hit'); // createPeerConnection()\n      // var localStream\n\n      var desc = new RTCSessionDescription(createdOffer);\n      myPeerConnection.setRemoteDescription(desc) // .then(() => {\n      //   return navigator.mediaDevices.getUserMedia(mediaConstraints)\n      // })\n      // .then(stream => {\n      //   console.log(userStream,'localstream')\n      //   userVideo.current.srcObject = localStream\n      //   localStream\n      //     .getTracks()\n      //     .forEach(track => myPeerConnection.addTrack(track, localStream))\n      // })\n      .then(() => {\n        return myPeerConnection.createAnswer();\n      }).then(function (answer) {\n        return myPeerConnection.setLocalDescription(answer);\n      }).then(() => {\n        socket.emit('video-answer-to-room', {\n          roomNum: props.match.params.id,\n          sdp: myPeerConnection.localDescription\n        });\n      });\n    });\n  });\n\n  function handleTrackEvent(event) {\n    console.log(event.streams);\n    partnerVideo.current.srcObject = event.streams[0];\n    allVideos.push(useCreateNewRef(event));\n    counter++;\n  }\n\n  function createPeerConnection() {\n    myPeerConnection = new RTCPeerConnection({\n      iceServers: [{\n        urls: 'stun:stun3.l.google.com:19302'\n      }, {\n        urls: 'turn:numb.viagenie.ca',\n        credential: 'muazkh',\n        username: 'webrtc@live.com'\n      }]\n    });\n    myPeerConnection.onicecandidate = handleICECandidateEvent;\n    myPeerConnection.ontrack = handleTrackEvent;\n    myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent;\n  }\n\n  function handleNegotiationNeededEvent() {\n    myPeerConnection.createOffer().then(function (offer) {\n      return myPeerConnection.setLocalDescription(offer);\n    }).then(() => {\n      socket.emit('video-offer-to-room', {\n        sdp: myPeerConnection.localDescription,\n        roomNum: props.match.params.id\n      });\n    });\n  }\n\n  function joinroom() {\n    console.log('reached join roon');\n    createPeerConnection();\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz;\n      userStream = streamz;\n      streamz.getTracks().forEach(track => myPeerConnection.addTrack(track, streamz));\n    });\n  }\n\n  function handleICECandidateEvent(event) {\n    socket.emit('new-ice-candidate-to-room', {\n      roomNum: props.match.params.id,\n      candidate: event.candidate\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: partnerVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      socket.emit('connectToRooms', props.match.params.id);\n      joinroom();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, \"Connect\"));\n}\n\nexport default withRouter(Rooms);","map":{"version":3,"sources":["/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Rooms.js"],"names":["React","useEffect","useRef","useState","io","withRouter","socket","counter","mediaConstraints","audio","video","allVideos","myPeerConnection","userStream","useCreateNewRef","event","newVideo","current","srcObject","streams","Rooms","props","userVideo","otherStreams","partnerVideo","on","joinroom","candidate","newCandidate","RTCIceCandidate","addIceCandidate","createdAnswer","desc","RTCSessionDescription","setRemoteDescription","createdOffer","console","log","then","createAnswer","answer","setLocalDescription","emit","roomNum","match","params","id","sdp","localDescription","handleTrackEvent","push","createPeerConnection","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","ontrack","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","offer","navigator","mediaDevices","getUserMedia","streamz","getTracks","forEach","track","addTrack"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport io from 'socket.io-client'\nimport { withRouter } from 'react-router'\n\nconst socket = io('http://localhost:8000')\nlet counter = 0\n\nlet mediaConstraints = {\n  audio: true, // We want an audio track\n  video: true // ...and we want a video track\n}\n\nlet allVideos = []\n\nlet myPeerConnection\nlet userStream\n\nconst useCreateNewRef = event => {\n  let newVideo = {}\n  useEffect(() => {\n    newVideo[counter] = useRef()\n    newVideo.current.srcObject = event.streams[0]\n  })\n  return newVideo\n}\n\nfunction Rooms(props) {\n  const userVideo = useRef()\n  const otherStreams = useRef([])\n\n  const partnerVideo = useRef()\n  useEffect(() => {\n    socket.on('connectToRoom', () => {\n      joinroom()\n    })\n\n    socket.on('handle-new-ice-candidate', candidate => {\n      if (candidate) {\n        const newCandidate = new RTCIceCandidate(candidate)\n        myPeerConnection.addIceCandidate(newCandidate)\n      }\n    })\n\n    socket.on('handle-answer-to-room', createdAnswer => {\n      const desc = new RTCSessionDescription(createdAnswer)\n      myPeerConnection.setRemoteDescription(desc)\n    })\n\n    socket.on('handle-offer-to-room', createdOffer => {\n      console.log('handle-offer-room is hit')\n      // createPeerConnection()\n      // var localStream\n      var desc = new RTCSessionDescription(createdOffer)\n\n      myPeerConnection\n        .setRemoteDescription(desc)\n        // .then(() => {\n        //   return navigator.mediaDevices.getUserMedia(mediaConstraints)\n        // })\n        // .then(stream => {\n        //   console.log(userStream,'localstream')\n        //   userVideo.current.srcObject = localStream\n        //   localStream\n        //     .getTracks()\n        //     .forEach(track => myPeerConnection.addTrack(track, localStream))\n        // })\n        .then(() => {\n          return myPeerConnection.createAnswer()\n        })\n        .then(function(answer) {\n          return myPeerConnection.setLocalDescription(answer)\n        })\n        .then(() => {\n          socket.emit('video-answer-to-room', {\n            roomNum: props.match.params.id,\n            sdp: myPeerConnection.localDescription\n          })\n        })\n    })\n  })\n\n  function handleTrackEvent(event) {\n    console.log(event.streams)\n    partnerVideo.current.srcObject = event.streams[0]\n    allVideos.push(useCreateNewRef(event))\n    counter++\n  }\n\n  function createPeerConnection() {\n    myPeerConnection = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun3.l.google.com:19302' },\n        {\n          urls: 'turn:numb.viagenie.ca',\n          credential: 'muazkh',\n          username: 'webrtc@live.com'\n        }\n      ]\n    })\n    myPeerConnection.onicecandidate = handleICECandidateEvent\n    myPeerConnection.ontrack = handleTrackEvent\n    myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent\n  }\n\n  function handleNegotiationNeededEvent() {\n    myPeerConnection\n      .createOffer()\n      .then(function(offer) {\n        return myPeerConnection.setLocalDescription(offer)\n      })\n      .then(() => {\n        socket.emit('video-offer-to-room', {\n          sdp: myPeerConnection.localDescription,\n          roomNum: props.match.params.id\n        })\n      })\n  }\n\n  function joinroom() {\n    console.log('reached join roon')\n    createPeerConnection()\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz\n      userStream = streamz\n      streamz\n        .getTracks()\n        .forEach(track => myPeerConnection.addTrack(track, streamz))\n    })\n  }\n\n  function handleICECandidateEvent(event) {\n    socket.emit('new-ice-candidate-to-room', {\n      roomNum: props.match.params.id,\n      candidate: event.candidate\n    })\n  }\n\n  return (\n    <div>\n      <video autoPlay ref={userVideo}></video>\n      <video autoPlay ref={partnerVideo}></video>\n      <button\n        onClick={() => {\n          socket.emit('connectToRooms', props.match.params.id)\n          joinroom()\n        }}\n      >\n        Connect\n      </button>\n    </div>\n  )\n}\n\nexport default withRouter(Rooms)\n"]},"metadata":{},"sourceType":"module"}
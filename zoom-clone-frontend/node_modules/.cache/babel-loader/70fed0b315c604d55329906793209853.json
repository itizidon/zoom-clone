{"ast":null,"code":"var _jsxFileName = \"/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Rooms.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { withRouter } from 'react-router';\nconst socket = io('http://localhost:8000');\nlet mediaConstraints = {\n  audio: true,\n  // We want an audio track\n  video: true // ...and we want a video track\n\n};\nvar displayMediaOptions = {\n  video: {\n    cursor: 'always'\n  },\n  audio: false\n};\nlet myPeerConnection;\nlet userStream;\n\nfunction Rooms(props) {\n  const userVideo = useRef();\n  const [allVideos, setAllVideos] = useState({\n    listOfStreams: [React.createRef()],\n    curState: true\n  });\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz;\n      userStream = streamz;\n    });\n    socket.on('connectToRoom', () => {\n      joinroom();\n    });\n    socket.on('makeConnection', () => {\n      userStream.getTracks().forEach(track => myPeerConnection.addTrack(track, userStream));\n    });\n    socket.on('handle-new-ice-candidate', candidate => {\n      if (candidate) {\n        const newCandidate = new RTCIceCandidate(candidate);\n        myPeerConnection.addIceCandidate(newCandidate);\n      }\n    });\n    socket.on('handle-answer-to-room', createdAnswer => {\n      const desc = new RTCSessionDescription(createdAnswer);\n      myPeerConnection.setRemoteDescription(desc);\n    });\n    socket.on('handle-offer-to-room', createdOffer => {\n      createPeerConnection();\n      var desc = new RTCSessionDescription(createdOffer);\n      myPeerConnection.setRemoteDescription(desc).then(stream => {\n        userStream.getTracks().forEach(track => {\n          myPeerConnection.addTrack(track, userStream);\n          return 'return';\n        });\n      }).then(() => {\n        return myPeerConnection.createAnswer();\n      }).then(function (answer) {\n        return myPeerConnection.setLocalDescription(answer);\n      }).then(() => {\n        socket.emit('video-answer-to-room', {\n          roomNum: props.match.params.id,\n          sdp: myPeerConnection.localDescription\n        });\n      });\n    });\n  }, []);\n\n  function handleTrackEvent(event) {\n    setAllVideos(oldArray => {\n      //if true\n      if (oldArray.curState) {\n        let newObj = {};\n        newObj.listOfStreams = oldArray.listOfStreams;\n        newObj.curState = false;\n        return newObj;\n      } else {\n        let newRef = React.createRef();\n        let newObj = {};\n        newObj.listOfStreams = oldArray.listOfStreams;\n        newObj.listOfStreams[newObj.listOfStreams.length - 1].current.srcObject = event.streams[0];\n        newObj.curState = true;\n        return newObj;\n      }\n    }); // if (allVideos.curState === true) {\n    //   setAllVideos(oldArray => {\n    //     let newRef = React.createRef()\n    //     let newObj = {}\n    //     newObj.listOfStreams = oldArray.listOfStreams\n    //     // oldArray.listOfStreams[\n    //     //   oldArray.listOfStreams.length - 1\n    //     // ].current.srcObject = event.streams[0]\n    //     // oldArray.listOfStreams = [...oldArray.listOfStreams, newRef]\n    //     // oldArray.curState = false\n    //     newObj.listOfStreams = [...oldArray.listOfStreams, newRef]\n    //     newObj.curState = false\n    //     return newObj\n    //   })\n    // } else {\n    //   setAllVideos(oldArray => {\n    //     let newRef = React.createRef()\n    //     let newObj = {}\n    //     // newObj.listOfStreams = [...oldArray.listOfStreams, newRef]\n    //     // oldArray.listOfStreams[\n    //     //   oldArray.listOfStreams.length - 2\n    //     // ].current.srcObject = event.streams[0]\n    //     // newObj.listOfStreams = oldArray.listOfStreams\n    //     newObj.curState = true\n    //     return oldArray\n    //   })\n    // }\n\n    console.log('added track', event);\n    console.log(allVideos, 'this is addtrack allvideos');\n  }\n\n  function createPeerConnection() {\n    myPeerConnection = new RTCPeerConnection({\n      iceServers: [{\n        urls: 'stun:stun3.l.google.com:19302'\n      }, {\n        urls: 'turn:numb.viagenie.ca',\n        credential: 'muazkh',\n        username: 'webrtc@live.com'\n      }]\n    });\n    myPeerConnection.onicecandidate = handleICECandidateEvent;\n    myPeerConnection.ontrack = handleTrackEvent;\n    myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent;\n  }\n\n  function handleNegotiationNeededEvent() {\n    myPeerConnection.createOffer().then(function (offer) {\n      return myPeerConnection.setLocalDescription(offer);\n    }).then(() => {\n      socket.emit('video-offer-to-room', {\n        sdp: myPeerConnection.localDescription,\n        roomNum: props.match.params.id\n      });\n    });\n  }\n\n  function joinroom() {\n    createPeerConnection();\n  }\n\n  function handleICECandidateEvent(event) {\n    if (event.candidate) {\n      socket.emit('new-ice-candidate-to-room', {\n        roomNum: props.match.params.id,\n        candidate: event.candidate\n      });\n    }\n  }\n\n  console.log(allVideos, 'this is rerender addvideos');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }), allVideos.listOfStreams.length >= 1 ? allVideos.listOfStreams.map((cur, indx) => {\n    return /*#__PURE__*/React.createElement(\"video\", {\n      key: indx,\n      autoPlay: true,\n      ref: cur,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 20\n      }\n    });\n  }) : null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      socket.emit('connectToRooms', props.match.params.id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, \"Connect\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      console.log('this is run');\n      navigator.mediaDevices.getDisplayMedia(displayMediaOptions).then(videoStream => {\n        console.log(videoStream);\n        userVideo.current.srcObject = videoStream;\n        videoStream.getTracks().forEach(track => {\n          myPeerConnection.addTrack(track, videoStream);\n        });\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, \"Share Screen\"));\n}\n\nexport default withRouter(Rooms);","map":{"version":3,"sources":["/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Rooms.js"],"names":["React","useEffect","useRef","useState","io","withRouter","socket","mediaConstraints","audio","video","displayMediaOptions","cursor","myPeerConnection","userStream","Rooms","props","userVideo","allVideos","setAllVideos","listOfStreams","createRef","curState","navigator","mediaDevices","getUserMedia","then","streamz","current","srcObject","on","joinroom","getTracks","forEach","track","addTrack","candidate","newCandidate","RTCIceCandidate","addIceCandidate","createdAnswer","desc","RTCSessionDescription","setRemoteDescription","createdOffer","createPeerConnection","stream","createAnswer","answer","setLocalDescription","emit","roomNum","match","params","id","sdp","localDescription","handleTrackEvent","event","oldArray","newObj","newRef","length","streams","console","log","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","ontrack","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","offer","map","cur","indx","getDisplayMedia","videoStream"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport io from 'socket.io-client'\nimport { withRouter } from 'react-router'\n\nconst socket = io('http://localhost:8000')\n\nlet mediaConstraints = {\n  audio: true, // We want an audio track\n  video: true // ...and we want a video track\n}\n\nvar displayMediaOptions = {\n  video: {\n    cursor: 'always'\n  },\n  audio: false\n}\n\nlet myPeerConnection\nlet userStream\n\nfunction Rooms(props) {\n  const userVideo = useRef()\n  const [allVideos, setAllVideos] = useState({\n    listOfStreams: [React.createRef()],\n    curState: true\n  })\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz\n      userStream = streamz\n    })\n\n    socket.on('connectToRoom', () => {\n      joinroom()\n    })\n\n    socket.on('makeConnection', () => {\n      userStream\n        .getTracks()\n        .forEach(track => myPeerConnection.addTrack(track, userStream))\n    })\n\n    socket.on('handle-new-ice-candidate', candidate => {\n      if (candidate) {\n        const newCandidate = new RTCIceCandidate(candidate)\n        myPeerConnection.addIceCandidate(newCandidate)\n      }\n    })\n\n    socket.on('handle-answer-to-room', createdAnswer => {\n      const desc = new RTCSessionDescription(createdAnswer)\n      myPeerConnection.setRemoteDescription(desc)\n    })\n\n    socket.on('handle-offer-to-room', createdOffer => {\n      createPeerConnection()\n      var desc = new RTCSessionDescription(createdOffer)\n\n      myPeerConnection\n        .setRemoteDescription(desc)\n        .then(stream => {\n          userStream.getTracks().forEach(track => {\n            myPeerConnection.addTrack(track, userStream)\n            return 'return'\n          })\n        })\n        .then(() => {\n          return myPeerConnection.createAnswer()\n        })\n        .then(function(answer) {\n          return myPeerConnection.setLocalDescription(answer)\n        })\n        .then(() => {\n          socket.emit('video-answer-to-room', {\n            roomNum: props.match.params.id,\n            sdp: myPeerConnection.localDescription\n          })\n        })\n    })\n  }, [])\n\n  function handleTrackEvent(event) {\n    setAllVideos(oldArray => {\n      //if true\n      if (oldArray.curState) {\n        let newObj = {}\n\n        newObj.listOfStreams = oldArray.listOfStreams\n        newObj.curState = false\n\n        return newObj\n      } else {\n        let newRef = React.createRef()\n        let newObj = {}\n\n        newObj.listOfStreams = oldArray.listOfStreams\n        newObj.listOfStreams[\n          newObj.listOfStreams.length - 1\n        ].current.srcObject = event.streams[0]\n\n        newObj.curState = true\n        return newObj\n      }\n    })\n\n    // if (allVideos.curState === true) {\n    //   setAllVideos(oldArray => {\n    //     let newRef = React.createRef()\n    //     let newObj = {}\n    //     newObj.listOfStreams = oldArray.listOfStreams\n    //     // oldArray.listOfStreams[\n    //     //   oldArray.listOfStreams.length - 1\n    //     // ].current.srcObject = event.streams[0]\n    //     // oldArray.listOfStreams = [...oldArray.listOfStreams, newRef]\n    //     // oldArray.curState = false\n\n    //     newObj.listOfStreams = [...oldArray.listOfStreams, newRef]\n    //     newObj.curState = false\n    //     return newObj\n    //   })\n    // } else {\n    //   setAllVideos(oldArray => {\n    //     let newRef = React.createRef()\n    //     let newObj = {}\n    //     // newObj.listOfStreams = [...oldArray.listOfStreams, newRef]\n    //     // oldArray.listOfStreams[\n    //     //   oldArray.listOfStreams.length - 2\n    //     // ].current.srcObject = event.streams[0]\n\n    //     // newObj.listOfStreams = oldArray.listOfStreams\n    //     newObj.curState = true\n    //     return oldArray\n    //   })\n    // }\n    console.log('added track', event)\n    console.log(allVideos, 'this is addtrack allvideos')\n  }\n\n  function createPeerConnection() {\n    myPeerConnection = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun3.l.google.com:19302' },\n        {\n          urls: 'turn:numb.viagenie.ca',\n          credential: 'muazkh',\n          username: 'webrtc@live.com'\n        }\n      ]\n    })\n    myPeerConnection.onicecandidate = handleICECandidateEvent\n    myPeerConnection.ontrack = handleTrackEvent\n    myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent\n  }\n\n  function handleNegotiationNeededEvent() {\n    myPeerConnection\n      .createOffer()\n      .then(function(offer) {\n        return myPeerConnection.setLocalDescription(offer)\n      })\n      .then(() => {\n        socket.emit('video-offer-to-room', {\n          sdp: myPeerConnection.localDescription,\n          roomNum: props.match.params.id\n        })\n      })\n  }\n\n  function joinroom() {\n    createPeerConnection()\n  }\n\n  function handleICECandidateEvent(event) {\n    if (event.candidate) {\n      socket.emit('new-ice-candidate-to-room', {\n        roomNum: props.match.params.id,\n        candidate: event.candidate\n      })\n    }\n  }\n\n  console.log(allVideos, 'this is rerender addvideos')\n  return (\n    <div>\n      <video autoPlay ref={userVideo}></video>\n      {allVideos.listOfStreams.length >= 1\n        ? allVideos.listOfStreams.map((cur, indx) => {\n            return <video key={indx} autoPlay ref={cur}></video>\n          })\n        : null}\n      <button\n        onClick={() => {\n          socket.emit('connectToRooms', props.match.params.id)\n        }}\n      >\n        Connect\n      </button>\n      <button\n        onClick={() => {\n          console.log('this is run')\n          navigator.mediaDevices\n            .getDisplayMedia(displayMediaOptions)\n            .then(videoStream => {\n              console.log(videoStream)\n              userVideo.current.srcObject = videoStream\n\n              videoStream.getTracks().forEach(track => {\n                myPeerConnection.addTrack(track, videoStream)\n              })\n            })\n        }}\n      >\n        Share Screen\n      </button>\n    </div>\n  )\n}\n\nexport default withRouter(Rooms)\n"]},"metadata":{},"sourceType":"module"}
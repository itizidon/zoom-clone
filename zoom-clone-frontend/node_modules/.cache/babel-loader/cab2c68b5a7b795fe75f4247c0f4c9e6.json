{"ast":null,"code":"var _jsxFileName = \"/home/don/projects/zoom-clone/src/components/Room.js\";\nimport React, { useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:8000');\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints);\n};\n\nlet stream;\nlet sdp;\nlet myPeerConnection;\n\nfunction Room() {\n  const userVideo = useRef();\n  useEffect(() => {\n    createPeerConnection();\n\n    function createPeerConnection() {\n      myPeerConnection = new RTCPeerConnection({\n        iceServers: [{\n          urls: 'stun.l.google.com:19302'\n        }]\n      });\n      myPeerConnection.onicecandidate = handleICECandidateEvent;\n      myPeerConnection.ontrack = handleTrackEvent;\n      myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent;\n      myPeerConnection.onremovetrack = handleRemoveTrackEvent;\n      myPeerConnection.oniceconnectionstatechange = handleICEConnectionStateChangeEvent;\n      myPeerConnection.onicegatheringstatechange = handleICEGatheringStateChangeEvent;\n      myPeerConnection.onsignalingstatechange = handleSignalingStateChangeEvent;\n    } // const peerConnection = new RTCPeerConnection()\n    // socket.on('offer', async function(message){\n    //   let othersdp\n    //   await peerConnection.setRemoteDescription(message)\n    //   othersdp = await peerConnection.createAnswer(message)\n    //   await peerConnection.setLocalDescription(othersdp)\n    //   await socket.emit('answer', peerConnection.localDescription)\n    // })\n    // socket.on('answer', function(message){\n    //   peerConnection.setRemoteDescription(message)\n    // })\n    // async function getStream() {\n    //   try {\n    //     stream = await openMediaDevices({ video: true, audio: true })\n    //     userVideo.current.srcObject = stream\n    //     for( const track of stream.getTracks()){\n    //       peerConnection.addTrack(track)\n    //     }\n    //     sdp = await peerConnection.createOffer()\n    //     await peerConnection.setLocalDescription(sdp)\n    //     socket.emit('offer', peerConnection.localDescription)\n    //   } catch (error) {\n    //     console.error('Error accessing media devices.', error)\n    //   }\n    // }\n    // peerConnection.ontrack = function(event){\n    //   console.log(event)\n    //   userVideo.srcObject = event.stream\n    // }\n    // getStream()\n\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Room;","map":{"version":3,"sources":["/home/don/projects/zoom-clone/src/components/Room.js"],"names":["React","useEffect","useRef","io","socket","openMediaDevices","constraints","navigator","mediaDevices","getUserMedia","stream","sdp","myPeerConnection","Room","userVideo","createPeerConnection","RTCPeerConnection","iceServers","urls","onicecandidate","handleICECandidateEvent","ontrack","handleTrackEvent","onnegotiationneeded","handleNegotiationNeededEvent","onremovetrack","handleRemoveTrackEvent","oniceconnectionstatechange","handleICEConnectionStateChangeEvent","onicegatheringstatechange","handleICEGatheringStateChangeEvent","onsignalingstatechange","handleSignalingStateChangeEvent"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,CAAjB;;AAEA,MAAME,gBAAgB,GAAG,MAAMC,WAAN,IAAqB;AAC5C,SAAO,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCH,WAApC,CAAb;AACD,CAFD;;AAIA,IAAII,MAAJ;AACA,IAAIC,GAAJ;AAEA,IAAIC,gBAAJ;;AAEA,SAASC,IAAT,GAAgB;AACd,QAAMC,SAAS,GAAGZ,MAAM,EAAxB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,oBAAoB;;AAEpB,aAASA,oBAAT,GAAgC;AAC9BH,MAAAA,gBAAgB,GAAG,IAAII,iBAAJ,CAAsB;AACvCC,QAAAA,UAAU,EAAE,CACV;AACEC,UAAAA,IAAI,EAAE;AADR,SADU;AAD2B,OAAtB,CAAnB;AAQAN,MAAAA,gBAAgB,CAACO,cAAjB,GAAkCC,uBAAlC;AACAR,MAAAA,gBAAgB,CAACS,OAAjB,GAA2BC,gBAA3B;AACAV,MAAAA,gBAAgB,CAACW,mBAAjB,GAAuCC,4BAAvC;AACAZ,MAAAA,gBAAgB,CAACa,aAAjB,GAAiCC,sBAAjC;AACAd,MAAAA,gBAAgB,CAACe,0BAAjB,GAA8CC,mCAA9C;AACAhB,MAAAA,gBAAgB,CAACiB,yBAAjB,GAA6CC,kCAA7C;AACAlB,MAAAA,gBAAgB,CAACmB,sBAAjB,GAA0CC,+BAA1C;AACD,KAnBa,CAoBd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,GArDQ,EAqDN,EArDM,CAAT;AAuDA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,GAAG,EAAElB,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,eAAeD,IAAf","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport io from 'socket.io-client'\n\nconst socket = io('http://localhost:8000')\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints)\n}\n\nlet stream\nlet sdp\n\nlet myPeerConnection\n\nfunction Room() {\n  const userVideo = useRef()\n  useEffect(() => {\n    createPeerConnection()\n\n    function createPeerConnection() {\n      myPeerConnection = new RTCPeerConnection({\n        iceServers: [\n          {\n            urls: 'stun.l.google.com:19302'\n          }\n        ]\n      })\n\n      myPeerConnection.onicecandidate = handleICECandidateEvent\n      myPeerConnection.ontrack = handleTrackEvent\n      myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent\n      myPeerConnection.onremovetrack = handleRemoveTrackEvent\n      myPeerConnection.oniceconnectionstatechange = handleICEConnectionStateChangeEvent\n      myPeerConnection.onicegatheringstatechange = handleICEGatheringStateChangeEvent\n      myPeerConnection.onsignalingstatechange = handleSignalingStateChangeEvent\n    }\n    // const peerConnection = new RTCPeerConnection()\n\n    // socket.on('offer', async function(message){\n    //   let othersdp\n    //   await peerConnection.setRemoteDescription(message)\n    //   othersdp = await peerConnection.createAnswer(message)\n    //   await peerConnection.setLocalDescription(othersdp)\n    //   await socket.emit('answer', peerConnection.localDescription)\n    // })\n\n    // socket.on('answer', function(message){\n    //   peerConnection.setRemoteDescription(message)\n    // })\n\n    // async function getStream() {\n    //   try {\n    //     stream = await openMediaDevices({ video: true, audio: true })\n    //     userVideo.current.srcObject = stream\n    //     for( const track of stream.getTracks()){\n    //       peerConnection.addTrack(track)\n    //     }\n    //     sdp = await peerConnection.createOffer()\n    //     await peerConnection.setLocalDescription(sdp)\n    //     socket.emit('offer', peerConnection.localDescription)\n    //   } catch (error) {\n    //     console.error('Error accessing media devices.', error)\n    //   }\n    // }\n    // peerConnection.ontrack = function(event){\n    //   console.log(event)\n    //   userVideo.srcObject = event.stream\n    // }\n    // getStream()\n  }, [])\n\n  return (\n    <div>\n      <video autoPlay ref={userVideo}></video>\n    </div>\n  )\n}\n\nexport default Room\n"]},"metadata":{},"sourceType":"module"}
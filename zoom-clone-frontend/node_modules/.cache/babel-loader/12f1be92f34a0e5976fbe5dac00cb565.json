{"ast":null,"code":"var _jsxFileName = \"/home/don/projects/zoom-clone/src/components/Room.js\";\nimport React, { useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nlet mediaConstraints = {\n  audio: true,\n  // We want an audio track\n  video: true // ...and we want a video track\n\n};\nconst socket = io('http://localhost:8000');\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints);\n};\n\nlet myPeerConnection; //clinets stream\n\nlet myStream; //other clinets stream\n\nlet userA;\n\nfunction Room() {\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n  useEffect(() => {\n    socket.emit('join room');\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz; // streamz.getTracks().forEach(track => myStream.addTrack(track, streamz))\n    });\n    socket.on('sentVideo', () => {\n      console.log('HIT');\n      myPeerConnection = createPeerConnection();\n    });\n    socket.on('Aanswer', aAnswer => {\n      const desc = new RTCSessionDescription(aAnswer);\n      userA.setRemoteDescription(desc);\n    });\n    socket.on('BSDP', negotiation => {\n      userA = createPeerConnection();\n      const desc = new RTCSessionDescription(negotiation);\n      userA.setRemoteDescription(desc).then(() => {\n        myStream.getTracks().forEach(track => userA.addTrack(track, myStream));\n      }).then(() => {\n        return userA.createAnswer();\n      }).then(answer => {\n        return userA.setLocalDescription(answer);\n      }).then(() => {\n        socket.emit('answer', userA.localDescription);\n      });\n    });\n    socket.on('sendicecandidate', newIceCandidate => {\n      const newCandidate = new RTCIceCandidate(newIceCandidate);\n      userA.addIceCandidate(newCandidate);\n    });\n\n    function createPeerConnection() {\n      myPeerConnection = new RTCPeerConnection({\n        iceServers: [{\n          urls: 'stun:stun.stunprotocol.org'\n        }, {\n          urls: 'turn:numb.viagenie.ca',\n          credential: 'muazkh',\n          username: 'webrtc@live.com'\n        }]\n      });\n\n      myPeerConnection.onicecandidate = function handleICECandidateEvent(event) {\n        if (event.candidate) {\n          socket.emit('new-ice-candidate', event.candidate);\n        }\n      };\n\n      myPeerConnection.ontrack = function handleTrackEvent(event) {\n        console.log(event, 'added tracks');\n        partnerVideo.current.srcObject = event.streams[0];\n      };\n\n      myPeerConnection.onnegotiationneeded = function handleNegotiationNeededEvent() {\n        console.log('onnegotiation');\n        myPeerConnection.createOffer().then(function (offer) {\n          return myPeerConnection.setLocalDescription(offer);\n        }).then(() => {\n          socket.emit('video-offer', myPeerConnection.localDescription);\n        }); //socketio stuff\n      };\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: partnerVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Room;","map":{"version":3,"sources":["/home/don/projects/zoom-clone/src/components/Room.js"],"names":["React","useEffect","useRef","io","mediaConstraints","audio","video","socket","openMediaDevices","constraints","navigator","mediaDevices","getUserMedia","myPeerConnection","myStream","userA","Room","userVideo","partnerVideo","emit","then","streamz","current","srcObject","on","console","log","createPeerConnection","aAnswer","desc","RTCSessionDescription","setRemoteDescription","negotiation","getTracks","forEach","track","addTrack","createAnswer","answer","setLocalDescription","localDescription","newIceCandidate","newCandidate","RTCIceCandidate","addIceCandidate","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","event","candidate","ontrack","handleTrackEvent","streams","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","offer"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport io from 'socket.io-client'\n\nlet mediaConstraints = {\n  audio: true, // We want an audio track\n  video: true // ...and we want a video track\n}\nconst socket = io('http://localhost:8000')\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints)\n}\n\nlet myPeerConnection\n\n//clinets stream\nlet myStream\n\n//other clinets stream\nlet userA\n\nfunction Room() {\n  const userVideo = useRef()\n  const partnerVideo = useRef()\n\n  useEffect(() => {\n    socket.emit('join room')\n\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz\n      // streamz.getTracks().forEach(track => myStream.addTrack(track, streamz))\n    })\n\n    socket.on('sentVideo', () => {\n      console.log('HIT')\n      myPeerConnection = createPeerConnection()\n    })\n\n    socket.on('Aanswer', aAnswer => {\n      const desc = new RTCSessionDescription(aAnswer)\n      userA.setRemoteDescription(desc)\n    })\n\n    socket.on('BSDP', negotiation => {\n      userA = createPeerConnection()\n      const desc = new RTCSessionDescription(negotiation)\n      userA\n        .setRemoteDescription(desc)\n        .then(() => {\n          myStream.getTracks().forEach(track => userA.addTrack(track, myStream))\n        })\n        .then(() => {\n          return userA.createAnswer()\n        })\n        .then(answer => {\n          return userA.setLocalDescription(answer)\n        })\n        .then(() => {\n          socket.emit('answer', userA.localDescription)\n        })\n    })\n\n    socket.on('sendicecandidate', newIceCandidate => {\n      const newCandidate = new RTCIceCandidate(newIceCandidate)\n      userA.addIceCandidate(newCandidate)\n    })\n\n    function createPeerConnection() {\n      myPeerConnection = new RTCPeerConnection({\n        iceServers: [\n          { urls: 'stun:stun.stunprotocol.org' },\n          {\n            urls: 'turn:numb.viagenie.ca',\n            credential: 'muazkh',\n            username: 'webrtc@live.com'\n          }\n        ]\n      })\n\n      myPeerConnection.onicecandidate = function handleICECandidateEvent(\n        event\n      ) {\n        if (event.candidate) {\n          socket.emit('new-ice-candidate', event.candidate)\n        }\n      }\n\n      myPeerConnection.ontrack = function handleTrackEvent(event) {\n        console.log(event, 'added tracks')\n        partnerVideo.current.srcObject = event.streams[0]\n      }\n\n      myPeerConnection.onnegotiationneeded = function handleNegotiationNeededEvent() {\n        console.log('onnegotiation')\n        myPeerConnection\n          .createOffer()\n          .then(function(offer) {\n            return myPeerConnection.setLocalDescription(offer)\n          })\n          .then(() => {\n            socket.emit('video-offer', myPeerConnection.localDescription)\n          })\n        //socketio stuff\n      }\n    }\n  }, [])\n\n  return (\n    <div>\n      <video autoPlay ref={userVideo}></video>\n      <video autoPlay ref={partnerVideo}></video>\n    </div>\n  )\n}\n\nexport default Room\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/don/projects/zoom-clone/src/components/Room.js\";\nimport React, { useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:8000');\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints);\n};\n\nlet stream;\nlet sdp;\n\nfunction Room() {\n  const userVideo = useRef();\n  useEffect(() => {\n    const peerConnection = new RTCPeerConnection();\n    socket.on('offer', async function (message) {\n      let othersdp;\n      await peerConnection.setRemoteDescription(message);\n      othersdp = await peerConnection.createAnswer(message);\n      await peerConnection.setLocalDescription(othersdp);\n      await socket.emit('answer', peerConnection.localDescription);\n    });\n\n    async function getStream() {\n      try {\n        stream = await openMediaDevices({\n          video: true,\n          audio: true\n        });\n        userVideo.current.srcObject = stream;\n        await peerConnection.addStream(stream);\n        sdp = await peerConnection.createOffer();\n        await peerConnection.setLocalDescription(sdp);\n        socket.emit('offer', peerConnection.localDescription);\n      } catch (error) {\n        console.error('Error accessing media devices.', error);\n      }\n    }\n\n    getStream();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Room;","map":{"version":3,"sources":["/home/don/projects/zoom-clone/src/components/Room.js"],"names":["React","useEffect","useRef","io","socket","openMediaDevices","constraints","navigator","mediaDevices","getUserMedia","stream","sdp","Room","userVideo","peerConnection","RTCPeerConnection","on","message","othersdp","setRemoteDescription","createAnswer","setLocalDescription","emit","localDescription","getStream","video","audio","current","srcObject","addStream","createOffer","error","console"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,CAAjB;;AAEA,MAAME,gBAAgB,GAAG,MAAMC,WAAN,IAAqB;AAC5C,SAAO,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCH,WAApC,CAAb;AACD,CAFD;;AAIA,IAAII,MAAJ;AACA,IAAIC,GAAJ;;AAEA,SAASC,IAAT,GAAgB;AACd,QAAMC,SAAS,GAAGX,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,cAAc,GAAG,IAAIC,iBAAJ,EAAvB;AAEAX,IAAAA,MAAM,CAACY,EAAP,CAAU,OAAV,EAAmB,gBAAeC,OAAf,EAAuB;AACxC,UAAIC,QAAJ;AACA,YAAMJ,cAAc,CAACK,oBAAf,CAAoCF,OAApC,CAAN;AACAC,MAAAA,QAAQ,GAAG,MAAMJ,cAAc,CAACM,YAAf,CAA4BH,OAA5B,CAAjB;AACA,YAAMH,cAAc,CAACO,mBAAf,CAAmCH,QAAnC,CAAN;AACA,YAAMd,MAAM,CAACkB,IAAP,CAAY,QAAZ,EAAsBR,cAAc,CAACS,gBAArC,CAAN;AACD,KAND;;AAQA,mBAAeC,SAAf,GAA2B;AACzB,UAAI;AACFd,QAAAA,MAAM,GAAG,MAAML,gBAAgB,CAAC;AAAEoB,UAAAA,KAAK,EAAE,IAAT;AAAeC,UAAAA,KAAK,EAAE;AAAtB,SAAD,CAA/B;AACAb,QAAAA,SAAS,CAACc,OAAV,CAAkBC,SAAlB,GAA8BlB,MAA9B;AAEA,cAAMI,cAAc,CAACe,SAAf,CAAyBnB,MAAzB,CAAN;AACAC,QAAAA,GAAG,GAAG,MAAMG,cAAc,CAACgB,WAAf,EAAZ;AAEA,cAAMhB,cAAc,CAACO,mBAAf,CAAmCV,GAAnC,CAAN;AAEAP,QAAAA,MAAM,CAACkB,IAAP,CAAY,OAAZ,EAAqBR,cAAc,CAACS,gBAApC;AACD,OAVD,CAUE,OAAOQ,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,gCAAd,EAAgDA,KAAhD;AACD;AACF;;AACDP,IAAAA,SAAS;AACV,GA3BQ,EA2BN,EA3BM,CAAT;AA6BA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,GAAG,EAAEX,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,eAAeD,IAAf","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport io from 'socket.io-client'\n\nconst socket = io('http://localhost:8000')\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints)\n}\n\nlet stream\nlet sdp\n\nfunction Room() {\n  const userVideo = useRef()\n\n  useEffect(() => {\n    const peerConnection = new RTCPeerConnection()\n\n    socket.on('offer', async function(message){\n      let othersdp\n      await peerConnection.setRemoteDescription(message)\n      othersdp = await peerConnection.createAnswer(message)\n      await peerConnection.setLocalDescription(othersdp)\n      await socket.emit('answer', peerConnection.localDescription)\n    })\n\n    async function getStream() {\n      try {\n        stream = await openMediaDevices({ video: true, audio: true })\n        userVideo.current.srcObject = stream\n\n        await peerConnection.addStream(stream)\n        sdp = await peerConnection.createOffer()\n\n        await peerConnection.setLocalDescription(sdp)\n\n        socket.emit('offer', peerConnection.localDescription)\n      } catch (error) {\n        console.error('Error accessing media devices.', error)\n      }\n    }\n    getStream()\n  }, [])\n\n  return (\n    <div>\n      <video autoPlay ref={userVideo}></video>\n    </div>\n  )\n}\n\nexport default Room\n"]},"metadata":{},"sourceType":"module"}
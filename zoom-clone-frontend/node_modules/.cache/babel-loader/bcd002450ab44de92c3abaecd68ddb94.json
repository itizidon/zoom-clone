{"ast":null,"code":"var _jsxFileName = \"/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Rooms.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { withRouter } from 'react-router';\nconst socket = io('http://localhost:8000');\nlet mediaConstraints = {\n  audio: true,\n  // We want an audio track\n  video: {\n    width: 250,\n    height: 250\n  } // ...and we want a video track\n\n};\nlet names = [];\nvar displayMediaOptions = {\n  video: {\n    cursor: 'always'\n  },\n  audio: false\n};\nlet myPeerConnection;\nlet userStream;\nlet sentTracks = [];\n\nfunction Rooms(props) {\n  const userVideo = useRef();\n  const [allVideos, setAllVideos] = useState({\n    listOfStreams: [React.createRef()],\n    curState: true\n  });\n  const [toggle, setToggle] = useState(true);\n  const [revert, setRevert] = useState(true);\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz;\n      userStream = streamz;\n    });\n    socket.on('connectToRoom', () => {\n      joinroom();\n    });\n    socket.on('changedNames', (name, index) => {\n      names[index] = name;\n      console.log(names);\n    });\n    socket.on('makeConnection', () => {\n      userStream.getTracks().forEach(track => sentTracks.push(myPeerConnection.addTrack(track, userStream)));\n    });\n    socket.on('handle-new-ice-candidate', candidate => {\n      if (candidate) {\n        const newCandidate = new RTCIceCandidate(candidate);\n        myPeerConnection.addIceCandidate(newCandidate);\n      }\n    });\n    socket.on('handle-answer-to-room', createdAnswer => {\n      const desc = new RTCSessionDescription(createdAnswer);\n      myPeerConnection.setRemoteDescription(desc);\n    });\n    socket.on('handle-offer-to-room', createdOffer => {\n      createPeerConnection();\n      var desc = new RTCSessionDescription(createdOffer);\n      myPeerConnection.setRemoteDescription(desc).then(stream => {\n        userStream.getTracks().forEach(track => {\n          sentTracks.push(myPeerConnection.addTrack(track, userStream));\n          return 'return';\n        });\n      }).then(() => {\n        return myPeerConnection.createAnswer();\n      }).then(function (answer) {\n        return myPeerConnection.setLocalDescription(answer);\n      }).then(() => {\n        socket.emit('video-answer-to-room', {\n          roomNum: props.match.params.id,\n          sdp: myPeerConnection.localDescription\n        });\n      });\n    });\n  }, []);\n\n  function disconnect() {\n    if (myPeerConnection) {\n      myPeerConnection.ontrack = null;\n      myPeerConnection.onremovetrack = null;\n      myPeerConnection.onremovestream = null;\n      myPeerConnection.onicecandidate = null;\n      myPeerConnection.oniceconnectionstatechange = null;\n      myPeerConnection.onsignalingstatechange = null;\n      myPeerConnection.onicegatheringstatechange = null;\n      myPeerConnection.onnegotiationneeded = null;\n      allVideos.listOfStreams.map(cur => {\n        if (cur.current.srcObject) {\n          cur.current.srcObject.getTracks().forEach(track => track.stop());\n        }\n      }); // if (localVideo.srcObject) {\n      //   localVideo.srcObject.getTracks().forEach(track => track.stop())\n      // }\n\n      myPeerConnection.close();\n      myPeerConnection = null;\n    }\n  }\n\n  function handleTrackEvent(event) {\n    setAllVideos(oldArray => {\n      //if true\n      if (oldArray.curState) {\n        let newObj = {};\n        newObj.listOfStreams = oldArray.listOfStreams;\n        newObj.curState = false;\n        return newObj;\n      } else {\n        let newRef = React.createRef();\n        let newObj = {};\n        newObj.listOfStreams = oldArray.listOfStreams;\n        newObj.listOfStreams[newObj.listOfStreams.length - 1].current.srcObject = event.streams[0];\n        newObj.listOfStreams = [...oldArray.listOfStreams, newRef];\n        newObj.curState = true;\n        return newObj;\n      }\n    });\n  }\n\n  function createPeerConnection() {\n    myPeerConnection = new RTCPeerConnection({\n      iceServers: [{\n        urls: 'stun:stun3.l.google.com:19302'\n      }, {\n        urls: 'turn:numb.viagenie.ca',\n        credential: 'muazkh',\n        username: 'webrtc@live.com'\n      }],\n      sdpSemantics: 'unified-plan'\n    });\n    myPeerConnection.onicecandidate = handleICECandidateEvent;\n    myPeerConnection.ontrack = handleTrackEvent;\n    myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent;\n  }\n\n  function handleNegotiationNeededEvent() {\n    myPeerConnection.createOffer().then(function (offer) {\n      return myPeerConnection.setLocalDescription(offer);\n    }).then(() => {\n      socket.emit('video-offer-to-room', {\n        sdp: myPeerConnection.localDescription,\n        roomNum: props.match.params.id\n      });\n    });\n  }\n\n  function joinroom() {\n    createPeerConnection();\n  }\n\n  function handleICECandidateEvent(event) {\n    if (event.candidate) {\n      socket.emit('new-ice-candidate-to-room', {\n        roomNum: props.match.params.id,\n        candidate: event.candidate\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: event => {\n      event.preventDefault();\n      socket.emit('changeName', {\n        name: event.target.name.value,\n        roomNum: props.match.params.id\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }), allVideos.listOfStreams.length >= 1 ? allVideos.listOfStreams.map((cur, indx) => {\n    return /*#__PURE__*/React.createElement(\"video\", {\n      key: indx,\n      autoPlay: true,\n      ref: cur,\n      className: \"stream\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 15\n      }\n    });\n  }) : null, toggle ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      socket.emit('connectToRooms', props.match.params.id);\n      setToggle(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, \"Connect\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }\n  }, revert ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      navigator.mediaDevices.getDisplayMedia(displayMediaOptions).then(videoStream => {\n        let screenVideo = videoStream.getTracks()[0];\n        userVideo.current.srcObject = videoStream;\n        sentTracks.find(sender => {\n          return sender.track.kind === 'video';\n        }).replaceTrack(screenVideo);\n      });\n      setRevert(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }\n  }, \"Share Screen\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n        userVideo.current.srcObject = streamz;\n        userStream = streamz;\n        sentTracks.find(sender => {\n          return sender.track.kind === 'video';\n        }).replaceTrack(userStream.getTracks()[1]);\n      });\n      setRevert(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 15\n    }\n  }, \"Share Video\")), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      disconnect();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 11\n    }\n  }, \"Disconnect\")));\n}\n\nexport default withRouter(Rooms);","map":{"version":3,"sources":["/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Rooms.js"],"names":["React","useEffect","useRef","useState","io","withRouter","socket","mediaConstraints","audio","video","width","height","names","displayMediaOptions","cursor","myPeerConnection","userStream","sentTracks","Rooms","props","userVideo","allVideos","setAllVideos","listOfStreams","createRef","curState","toggle","setToggle","revert","setRevert","navigator","mediaDevices","getUserMedia","then","streamz","current","srcObject","on","joinroom","name","index","console","log","getTracks","forEach","track","push","addTrack","candidate","newCandidate","RTCIceCandidate","addIceCandidate","createdAnswer","desc","RTCSessionDescription","setRemoteDescription","createdOffer","createPeerConnection","stream","createAnswer","answer","setLocalDescription","emit","roomNum","match","params","id","sdp","localDescription","disconnect","ontrack","onremovetrack","onremovestream","onicecandidate","oniceconnectionstatechange","onsignalingstatechange","onicegatheringstatechange","onnegotiationneeded","map","cur","stop","close","handleTrackEvent","event","oldArray","newObj","newRef","length","streams","RTCPeerConnection","iceServers","urls","credential","username","sdpSemantics","handleICECandidateEvent","handleNegotiationNeededEvent","createOffer","offer","preventDefault","target","value","indx","getDisplayMedia","videoStream","screenVideo","find","sender","kind","replaceTrack"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,MAAMC,MAAM,GAAGF,EAAE,CAAC,uBAAD,CAAjB;AAEA,IAAIG,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,IADc;AACR;AACbC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAFc,CAEc;;AAFd,CAAvB;AAKA,IAAIC,KAAK,GAAG,EAAZ;AAEA,IAAIC,mBAAmB,GAAG;AACxBJ,EAAAA,KAAK,EAAE;AACLK,IAAAA,MAAM,EAAE;AADH,GADiB;AAIxBN,EAAAA,KAAK,EAAE;AAJiB,CAA1B;AAOA,IAAIO,gBAAJ;AACA,IAAIC,UAAJ;AACA,IAAIC,UAAU,GAAG,EAAjB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,QAAMC,SAAS,GAAGlB,MAAM,EAAxB;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAC;AACzCoB,IAAAA,aAAa,EAAE,CAACvB,KAAK,CAACwB,SAAN,EAAD,CAD0B;AAEzCC,IAAAA,QAAQ,EAAE;AAF+B,GAAD,CAA1C;AAIA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBxB,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACyB,MAAD,EAASC,SAAT,IAAsB1B,QAAQ,CAAC,IAAD,CAApC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd6B,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCzB,gBAApC,EAAsD0B,IAAtD,CAA2DC,OAAO,IAAI;AACpEd,MAAAA,SAAS,CAACe,OAAV,CAAkBC,SAAlB,GAA8BF,OAA9B;AACAlB,MAAAA,UAAU,GAAGkB,OAAb;AACD,KAHD;AAKA5B,IAAAA,MAAM,CAAC+B,EAAP,CAAU,eAAV,EAA2B,MAAM;AAC/BC,MAAAA,QAAQ;AACT,KAFD;AAIAhC,IAAAA,MAAM,CAAC+B,EAAP,CAAU,cAAV,EAA0B,CAACE,IAAD,EAAOC,KAAP,KAAiB;AACzC5B,MAAAA,KAAK,CAAC4B,KAAD,CAAL,GAAeD,IAAf;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY9B,KAAZ;AACD,KAHD;AAKAN,IAAAA,MAAM,CAAC+B,EAAP,CAAU,gBAAV,EAA4B,MAAM;AAChCrB,MAAAA,UAAU,CACP2B,SADH,GAEGC,OAFH,CAEWC,KAAK,IACZ5B,UAAU,CAAC6B,IAAX,CAAgB/B,gBAAgB,CAACgC,QAAjB,CAA0BF,KAA1B,EAAiC7B,UAAjC,CAAhB,CAHJ;AAKD,KAND;AAQAV,IAAAA,MAAM,CAAC+B,EAAP,CAAU,0BAAV,EAAsCW,SAAS,IAAI;AACjD,UAAIA,SAAJ,EAAe;AACb,cAAMC,YAAY,GAAG,IAAIC,eAAJ,CAAoBF,SAApB,CAArB;AACAjC,QAAAA,gBAAgB,CAACoC,eAAjB,CAAiCF,YAAjC;AACD;AACF,KALD;AAOA3C,IAAAA,MAAM,CAAC+B,EAAP,CAAU,uBAAV,EAAmCe,aAAa,IAAI;AAClD,YAAMC,IAAI,GAAG,IAAIC,qBAAJ,CAA0BF,aAA1B,CAAb;AACArC,MAAAA,gBAAgB,CAACwC,oBAAjB,CAAsCF,IAAtC;AACD,KAHD;AAKA/C,IAAAA,MAAM,CAAC+B,EAAP,CAAU,sBAAV,EAAkCmB,YAAY,IAAI;AAChDC,MAAAA,oBAAoB;AACpB,UAAIJ,IAAI,GAAG,IAAIC,qBAAJ,CAA0BE,YAA1B,CAAX;AAEAzC,MAAAA,gBAAgB,CACbwC,oBADH,CACwBF,IADxB,EAEGpB,IAFH,CAEQyB,MAAM,IAAI;AACd1C,QAAAA,UAAU,CAAC2B,SAAX,GAAuBC,OAAvB,CAA+BC,KAAK,IAAI;AACtC5B,UAAAA,UAAU,CAAC6B,IAAX,CAAgB/B,gBAAgB,CAACgC,QAAjB,CAA0BF,KAA1B,EAAiC7B,UAAjC,CAAhB;AACA,iBAAO,QAAP;AACD,SAHD;AAID,OAPH,EAQGiB,IARH,CAQQ,MAAM;AACV,eAAOlB,gBAAgB,CAAC4C,YAAjB,EAAP;AACD,OAVH,EAWG1B,IAXH,CAWQ,UAAS2B,MAAT,EAAiB;AACrB,eAAO7C,gBAAgB,CAAC8C,mBAAjB,CAAqCD,MAArC,CAAP;AACD,OAbH,EAcG3B,IAdH,CAcQ,MAAM;AACV3B,QAAAA,MAAM,CAACwD,IAAP,CAAY,sBAAZ,EAAoC;AAClCC,UAAAA,OAAO,EAAE5C,KAAK,CAAC6C,KAAN,CAAYC,MAAZ,CAAmBC,EADM;AAElCC,UAAAA,GAAG,EAAEpD,gBAAgB,CAACqD;AAFY,SAApC;AAID,OAnBH;AAoBD,KAxBD;AAyBD,GA5DQ,EA4DN,EA5DM,CAAT;;AA8DA,WAASC,UAAT,GAAsB;AACpB,QAAItD,gBAAJ,EAAsB;AACpBA,MAAAA,gBAAgB,CAACuD,OAAjB,GAA2B,IAA3B;AACAvD,MAAAA,gBAAgB,CAACwD,aAAjB,GAAiC,IAAjC;AACAxD,MAAAA,gBAAgB,CAACyD,cAAjB,GAAkC,IAAlC;AACAzD,MAAAA,gBAAgB,CAAC0D,cAAjB,GAAkC,IAAlC;AACA1D,MAAAA,gBAAgB,CAAC2D,0BAAjB,GAA8C,IAA9C;AACA3D,MAAAA,gBAAgB,CAAC4D,sBAAjB,GAA0C,IAA1C;AACA5D,MAAAA,gBAAgB,CAAC6D,yBAAjB,GAA6C,IAA7C;AACA7D,MAAAA,gBAAgB,CAAC8D,mBAAjB,GAAuC,IAAvC;AAEAxD,MAAAA,SAAS,CAACE,aAAV,CAAwBuD,GAAxB,CAA4BC,GAAG,IAAI;AACjC,YAAIA,GAAG,CAAC5C,OAAJ,CAAYC,SAAhB,EAA2B;AACzB2C,UAAAA,GAAG,CAAC5C,OAAJ,CAAYC,SAAZ,CAAsBO,SAAtB,GAAkCC,OAAlC,CAA0CC,KAAK,IAAIA,KAAK,CAACmC,IAAN,EAAnD;AACD;AACF,OAJD,EAVoB,CAgBpB;AACA;AACA;;AAEAjE,MAAAA,gBAAgB,CAACkE,KAAjB;AACAlE,MAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;;AAED,WAASmE,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B7D,IAAAA,YAAY,CAAC8D,QAAQ,IAAI;AACvB;AACA,UAAIA,QAAQ,CAAC3D,QAAb,EAAuB;AACrB,YAAI4D,MAAM,GAAG,EAAb;AAEAA,QAAAA,MAAM,CAAC9D,aAAP,GAAuB6D,QAAQ,CAAC7D,aAAhC;AACA8D,QAAAA,MAAM,CAAC5D,QAAP,GAAkB,KAAlB;AAEA,eAAO4D,MAAP;AACD,OAPD,MAOO;AACL,YAAIC,MAAM,GAAGtF,KAAK,CAACwB,SAAN,EAAb;AACA,YAAI6D,MAAM,GAAG,EAAb;AAEAA,QAAAA,MAAM,CAAC9D,aAAP,GAAuB6D,QAAQ,CAAC7D,aAAhC;AACA8D,QAAAA,MAAM,CAAC9D,aAAP,CACE8D,MAAM,CAAC9D,aAAP,CAAqBgE,MAArB,GAA8B,CADhC,EAEEpD,OAFF,CAEUC,SAFV,GAEsB+C,KAAK,CAACK,OAAN,CAAc,CAAd,CAFtB;AAIAH,QAAAA,MAAM,CAAC9D,aAAP,GAAuB,CAAC,GAAG6D,QAAQ,CAAC7D,aAAb,EAA4B+D,MAA5B,CAAvB;AACAD,QAAAA,MAAM,CAAC5D,QAAP,GAAkB,IAAlB;AACA,eAAO4D,MAAP;AACD;AACF,KAtBW,CAAZ;AAuBD;;AAED,WAAS5B,oBAAT,GAAgC;AAC9B1C,IAAAA,gBAAgB,GAAG,IAAI0E,iBAAJ,CAAsB;AACvCC,MAAAA,UAAU,EAAE,CACV;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADU,EAEV;AACEA,QAAAA,IAAI,EAAE,uBADR;AAEEC,QAAAA,UAAU,EAAE,QAFd;AAGEC,QAAAA,QAAQ,EAAE;AAHZ,OAFU,CAD2B;AASvCC,MAAAA,YAAY,EAAE;AATyB,KAAtB,CAAnB;AAWA/E,IAAAA,gBAAgB,CAAC0D,cAAjB,GAAkCsB,uBAAlC;AACAhF,IAAAA,gBAAgB,CAACuD,OAAjB,GAA2BY,gBAA3B;AACAnE,IAAAA,gBAAgB,CAAC8D,mBAAjB,GAAuCmB,4BAAvC;AACD;;AAED,WAASA,4BAAT,GAAwC;AACtCjF,IAAAA,gBAAgB,CACbkF,WADH,GAEGhE,IAFH,CAEQ,UAASiE,KAAT,EAAgB;AACpB,aAAOnF,gBAAgB,CAAC8C,mBAAjB,CAAqCqC,KAArC,CAAP;AACD,KAJH,EAKGjE,IALH,CAKQ,MAAM;AACV3B,MAAAA,MAAM,CAACwD,IAAP,CAAY,qBAAZ,EAAmC;AACjCK,QAAAA,GAAG,EAAEpD,gBAAgB,CAACqD,gBADW;AAEjCL,QAAAA,OAAO,EAAE5C,KAAK,CAAC6C,KAAN,CAAYC,MAAZ,CAAmBC;AAFK,OAAnC;AAID,KAVH;AAWD;;AAED,WAAS5B,QAAT,GAAoB;AAClBmB,IAAAA,oBAAoB;AACrB;;AAED,WAASsC,uBAAT,CAAiCZ,KAAjC,EAAwC;AACtC,QAAIA,KAAK,CAACnC,SAAV,EAAqB;AACnB1C,MAAAA,MAAM,CAACwD,IAAP,CAAY,2BAAZ,EAAyC;AACvCC,QAAAA,OAAO,EAAE5C,KAAK,CAAC6C,KAAN,CAAYC,MAAZ,CAAmBC,EADW;AAEvClB,QAAAA,SAAS,EAAEmC,KAAK,CAACnC;AAFsB,OAAzC;AAID;AACF;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,QAAQ,EAAEmC,KAAK,IAAI;AACjBA,MAAAA,KAAK,CAACgB,cAAN;AACA7F,MAAAA,MAAM,CAACwD,IAAP,CAAY,YAAZ,EAA0B;AACxBvB,QAAAA,IAAI,EAAE4C,KAAK,CAACiB,MAAN,CAAa7D,IAAb,CAAkB8D,KADA;AAExBtC,QAAAA,OAAO,EAAE5C,KAAK,CAAC6C,KAAN,CAAYC,MAAZ,CAAmBC;AAFJ,OAA1B;AAID,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,CADF,eAcE;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,GAAG,EAAE9C,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,EAeGC,SAAS,CAACE,aAAV,CAAwBgE,MAAxB,IAAkC,CAAlC,GACGlE,SAAS,CAACE,aAAV,CAAwBuD,GAAxB,CAA4B,CAACC,GAAD,EAAMuB,IAAN,KAAe;AACzC,wBACE;AAAO,MAAA,GAAG,EAAEA,IAAZ;AAAkB,MAAA,QAAQ,MAA1B;AAA2B,MAAA,GAAG,EAAEvB,GAAhC;AAAqC,MAAA,SAAS,EAAC,QAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD,GAJD,CADH,GAMG,IArBN,EAsBGrD,MAAM,gBACL;AACE,IAAA,OAAO,EAAE,MAAM;AACbpB,MAAAA,MAAM,CAACwD,IAAP,CAAY,gBAAZ,EAA8B3C,KAAK,CAAC6C,KAAN,CAAYC,MAAZ,CAAmBC,EAAjD;AAEAvC,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADK,gBAWL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,MAAM,gBACL;AACE,IAAA,OAAO,EAAE,MAAM;AACbE,MAAAA,SAAS,CAACC,YAAV,CACGwE,eADH,CACmB1F,mBADnB,EAEGoB,IAFH,CAEQuE,WAAW,IAAI;AACnB,YAAIC,WAAW,GAAGD,WAAW,CAAC7D,SAAZ,GAAwB,CAAxB,CAAlB;AACAvB,QAAAA,SAAS,CAACe,OAAV,CAAkBC,SAAlB,GAA8BoE,WAA9B;AACAvF,QAAAA,UAAU,CACPyF,IADH,CACQC,MAAM,IAAI;AACd,iBAAOA,MAAM,CAAC9D,KAAP,CAAa+D,IAAb,KAAsB,OAA7B;AACD,SAHH,EAIGC,YAJH,CAIgBJ,WAJhB;AAKD,OAVH;AAWA5E,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD,KAdH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADK,gBAoBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,OAAO,EAAE,MAAM;AACbC,MAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgBzB,gBADhB,EAEG0B,IAFH,CAEQC,OAAO,IAAI;AACfd,QAAAA,SAAS,CAACe,OAAV,CAAkBC,SAAlB,GAA8BF,OAA9B;AACAlB,QAAAA,UAAU,GAAGkB,OAAb;AACAjB,QAAAA,UAAU,CACPyF,IADH,CACQC,MAAM,IAAI;AACd,iBAAOA,MAAM,CAAC9D,KAAP,CAAa+D,IAAb,KAAsB,OAA7B;AACD,SAHH,EAIGC,YAJH,CAIgB7F,UAAU,CAAC2B,SAAX,GAAuB,CAAvB,CAJhB;AAKD,OAVH;AAWAd,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAdH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CArBJ,eA0CE;AACE,IAAA,OAAO,EAAE,MAAM;AACbwC,MAAAA,UAAU;AACX,KAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA1CF,CAjCJ,CADF;AAuFD;;AAED,eAAehE,UAAU,CAACa,KAAD,CAAzB","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport io from 'socket.io-client'\nimport { withRouter } from 'react-router'\n\nconst socket = io('http://localhost:8000')\n\nlet mediaConstraints = {\n  audio: true, // We want an audio track\n  video: { width: 250, height: 250 } // ...and we want a video track\n}\n\nlet names = []\n\nvar displayMediaOptions = {\n  video: {\n    cursor: 'always'\n  },\n  audio: false\n}\n\nlet myPeerConnection\nlet userStream\nlet sentTracks = []\n\nfunction Rooms(props) {\n  const userVideo = useRef()\n  const [allVideos, setAllVideos] = useState({\n    listOfStreams: [React.createRef()],\n    curState: true\n  })\n  const [toggle, setToggle] = useState(true)\n  const [revert, setRevert] = useState(true)\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz\n      userStream = streamz\n    })\n\n    socket.on('connectToRoom', () => {\n      joinroom()\n    })\n\n    socket.on('changedNames', (name, index) => {\n      names[index] = name\n      console.log(names)\n    })\n\n    socket.on('makeConnection', () => {\n      userStream\n        .getTracks()\n        .forEach(track =>\n          sentTracks.push(myPeerConnection.addTrack(track, userStream))\n        )\n    })\n\n    socket.on('handle-new-ice-candidate', candidate => {\n      if (candidate) {\n        const newCandidate = new RTCIceCandidate(candidate)\n        myPeerConnection.addIceCandidate(newCandidate)\n      }\n    })\n\n    socket.on('handle-answer-to-room', createdAnswer => {\n      const desc = new RTCSessionDescription(createdAnswer)\n      myPeerConnection.setRemoteDescription(desc)\n    })\n\n    socket.on('handle-offer-to-room', createdOffer => {\n      createPeerConnection()\n      var desc = new RTCSessionDescription(createdOffer)\n\n      myPeerConnection\n        .setRemoteDescription(desc)\n        .then(stream => {\n          userStream.getTracks().forEach(track => {\n            sentTracks.push(myPeerConnection.addTrack(track, userStream))\n            return 'return'\n          })\n        })\n        .then(() => {\n          return myPeerConnection.createAnswer()\n        })\n        .then(function(answer) {\n          return myPeerConnection.setLocalDescription(answer)\n        })\n        .then(() => {\n          socket.emit('video-answer-to-room', {\n            roomNum: props.match.params.id,\n            sdp: myPeerConnection.localDescription\n          })\n        })\n    })\n  }, [])\n\n  function disconnect() {\n    if (myPeerConnection) {\n      myPeerConnection.ontrack = null\n      myPeerConnection.onremovetrack = null\n      myPeerConnection.onremovestream = null\n      myPeerConnection.onicecandidate = null\n      myPeerConnection.oniceconnectionstatechange = null\n      myPeerConnection.onsignalingstatechange = null\n      myPeerConnection.onicegatheringstatechange = null\n      myPeerConnection.onnegotiationneeded = null\n\n      allVideos.listOfStreams.map(cur => {\n        if (cur.current.srcObject) {\n          cur.current.srcObject.getTracks().forEach(track => track.stop())\n        }\n      })\n\n      // if (localVideo.srcObject) {\n      //   localVideo.srcObject.getTracks().forEach(track => track.stop())\n      // }\n\n      myPeerConnection.close()\n      myPeerConnection = null\n    }\n  }\n\n  function handleTrackEvent(event) {\n    setAllVideos(oldArray => {\n      //if true\n      if (oldArray.curState) {\n        let newObj = {}\n\n        newObj.listOfStreams = oldArray.listOfStreams\n        newObj.curState = false\n\n        return newObj\n      } else {\n        let newRef = React.createRef()\n        let newObj = {}\n\n        newObj.listOfStreams = oldArray.listOfStreams\n        newObj.listOfStreams[\n          newObj.listOfStreams.length - 1\n        ].current.srcObject = event.streams[0]\n\n        newObj.listOfStreams = [...oldArray.listOfStreams, newRef]\n        newObj.curState = true\n        return newObj\n      }\n    })\n  }\n\n  function createPeerConnection() {\n    myPeerConnection = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun3.l.google.com:19302' },\n        {\n          urls: 'turn:numb.viagenie.ca',\n          credential: 'muazkh',\n          username: 'webrtc@live.com'\n        }\n      ],\n      sdpSemantics: 'unified-plan'\n    })\n    myPeerConnection.onicecandidate = handleICECandidateEvent\n    myPeerConnection.ontrack = handleTrackEvent\n    myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent\n  }\n\n  function handleNegotiationNeededEvent() {\n    myPeerConnection\n      .createOffer()\n      .then(function(offer) {\n        return myPeerConnection.setLocalDescription(offer)\n      })\n      .then(() => {\n        socket.emit('video-offer-to-room', {\n          sdp: myPeerConnection.localDescription,\n          roomNum: props.match.params.id\n        })\n      })\n  }\n\n  function joinroom() {\n    createPeerConnection()\n  }\n\n  function handleICECandidateEvent(event) {\n    if (event.candidate) {\n      socket.emit('new-ice-candidate-to-room', {\n        roomNum: props.match.params.id,\n        candidate: event.candidate\n      })\n    }\n  }\n\n  return (\n    <div>\n      <form\n        onSubmit={event => {\n          event.preventDefault()\n          socket.emit('changeName', {\n            name: event.target.name.value,\n            roomNum: props.match.params.id\n          })\n        }}\n      >\n        <label>\n          <input type=\"text\" name=\"name\"></input>\n        </label>\n      </form>\n      <video autoPlay ref={userVideo}></video>\n      {allVideos.listOfStreams.length >= 1\n        ? allVideos.listOfStreams.map((cur, indx) => {\n            return (\n              <video key={indx} autoPlay ref={cur} className=\"stream\"></video>\n            )\n          })\n        : null}\n      {toggle ? (\n        <button\n          onClick={() => {\n            socket.emit('connectToRooms', props.match.params.id)\n\n            setToggle(false)\n          }}\n        >\n          Connect\n        </button>\n      ) : (\n        <div>\n          {revert ? (\n            <button\n              onClick={() => {\n                navigator.mediaDevices\n                  .getDisplayMedia(displayMediaOptions)\n                  .then(videoStream => {\n                    let screenVideo = videoStream.getTracks()[0]\n                    userVideo.current.srcObject = videoStream\n                    sentTracks\n                      .find(sender => {\n                        return sender.track.kind === 'video'\n                      })\n                      .replaceTrack(screenVideo)\n                  })\n                setRevert(false)\n              }}\n            >\n              Share Screen\n            </button>\n          ) : (\n            <div>\n              <button\n                onClick={() => {\n                  navigator.mediaDevices\n                    .getUserMedia(mediaConstraints)\n                    .then(streamz => {\n                      userVideo.current.srcObject = streamz\n                      userStream = streamz\n                      sentTracks\n                        .find(sender => {\n                          return sender.track.kind === 'video'\n                        })\n                        .replaceTrack(userStream.getTracks()[1])\n                    })\n                  setRevert(true)\n                }}\n              >\n                Share Video\n              </button>\n            </div>\n          )}\n          <button\n            onClick={() => {\n              disconnect()\n            }}\n          >\n            Disconnect\n          </button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default withRouter(Rooms)\n"]},"metadata":{},"sourceType":"module"}
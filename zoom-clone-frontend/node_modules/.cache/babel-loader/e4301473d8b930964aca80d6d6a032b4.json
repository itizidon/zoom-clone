{"ast":null,"code":"var _jsxFileName = \"/home/don/projects/zoom-clone/src/components/Room.js\";\nimport React, { useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:8000');\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints);\n};\n\nlet stream;\nlet sdp;\nlet myPeerConnection;\n\nfunction Room() {\n  const userVideo = useRef();\n  useEffect(() => {\n    createPeerConnection();\n    userVideo.srcObject = openMediaDevices;\n\n    function createPeerConnection() {\n      myPeerConnection = new RTCPeerConnection({\n        iceServers: [{\n          urls: 'stun.l.google.com:19302'\n        }]\n      });\n\n      myPeerConnection.onicecandidate = function handleICECandidateEvent(event) {\n        if (event.candidate) {// sendToServer({\n          //   type: 'new-ice-candidate',\n          //   target: targetUsername,\n          //   candidate: event.candidate\n          // })\n        }\n      };\n\n      myPeerConnection.ontrack = function handleTrackEvent(event) {\n        document.getElementById('received_video').srcObject = event.streams[0];\n        document.getElementById('hangup-button').disabled = false;\n      };\n\n      myPeerConnection.onnegotiationneeded = function handleNegotiationNeededEvent() {\n        myPeerConnection.createOffer().then(function (offer) {\n          return myPeerConnection.setLocalDescription(offer);\n        });\n      };\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Room;","map":{"version":3,"sources":["/home/don/projects/zoom-clone/src/components/Room.js"],"names":["React","useEffect","useRef","io","socket","openMediaDevices","constraints","navigator","mediaDevices","getUserMedia","stream","sdp","myPeerConnection","Room","userVideo","createPeerConnection","srcObject","RTCPeerConnection","iceServers","urls","onicecandidate","handleICECandidateEvent","event","candidate","ontrack","handleTrackEvent","document","getElementById","streams","disabled","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","then","offer","setLocalDescription"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,CAAjB;;AAEA,MAAME,gBAAgB,GAAG,MAAMC,WAAN,IAAqB;AAC5C,SAAO,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCH,WAApC,CAAb;AACD,CAFD;;AAIA,IAAII,MAAJ;AACA,IAAIC,GAAJ;AAEA,IAAIC,gBAAJ;;AAEA,SAASC,IAAT,GAAgB;AACd,QAAMC,SAAS,GAAGZ,MAAM,EAAxB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,oBAAoB;AAEpBD,IAAAA,SAAS,CAACE,SAAV,GAAsBX,gBAAtB;;AAEA,aAASU,oBAAT,GAAgC;AAC9BH,MAAAA,gBAAgB,GAAG,IAAIK,iBAAJ,CAAsB;AACvCC,QAAAA,UAAU,EAAE,CACV;AACEC,UAAAA,IAAI,EAAE;AADR,SADU;AAD2B,OAAtB,CAAnB;;AAQAP,MAAAA,gBAAgB,CAACQ,cAAjB,GAAkC,SAASC,uBAAT,CAChCC,KADgC,EAEhC;AACA,YAAIA,KAAK,CAACC,SAAV,EAAqB,CACnB;AACA;AACA;AACA;AACA;AACD;AACF,OAVD;;AAYAX,MAAAA,gBAAgB,CAACY,OAAjB,GAA2B,SAASC,gBAAT,CAA0BH,KAA1B,EAAiC;AAC1DI,QAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CX,SAA1C,GAAsDM,KAAK,CAACM,OAAN,CAAc,CAAd,CAAtD;AACAF,QAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCE,QAAzC,GAAoD,KAApD;AACD,OAHD;;AAKAjB,MAAAA,gBAAgB,CAACkB,mBAAjB,GAAuC,SAASC,4BAAT,GAAwC;AAC7EnB,QAAAA,gBAAgB,CAACoB,WAAjB,GAA+BC,IAA/B,CAAoC,UAASC,KAAT,EAAgB;AAClD,iBAAOtB,gBAAgB,CAACuB,mBAAjB,CAAqCD,KAArC,CAAP;AACD,SAFD;AAGD,OAJD;AAKD;AACF,GArCQ,EAqCN,EArCM,CAAT;AAuCA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,GAAG,EAAEpB,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,eAAeD,IAAf","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport io from 'socket.io-client'\n\nconst socket = io('http://localhost:8000')\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints)\n}\n\nlet stream\nlet sdp\n\nlet myPeerConnection\n\nfunction Room() {\n  const userVideo = useRef()\n  useEffect(() => {\n    createPeerConnection()\n\n    userVideo.srcObject = openMediaDevices\n\n    function createPeerConnection() {\n      myPeerConnection = new RTCPeerConnection({\n        iceServers: [\n          {\n            urls: 'stun.l.google.com:19302'\n          }\n        ]\n      })\n\n      myPeerConnection.onicecandidate = function handleICECandidateEvent(\n        event\n      ) {\n        if (event.candidate) {\n          // sendToServer({\n          //   type: 'new-ice-candidate',\n          //   target: targetUsername,\n          //   candidate: event.candidate\n          // })\n        }\n      }\n\n      myPeerConnection.ontrack = function handleTrackEvent(event) {\n        document.getElementById('received_video').srcObject = event.streams[0]\n        document.getElementById('hangup-button').disabled = false\n      }\n\n      myPeerConnection.onnegotiationneeded = function handleNegotiationNeededEvent() {\n        myPeerConnection.createOffer().then(function(offer) {\n          return myPeerConnection.setLocalDescription(offer)\n        })\n      }\n    }\n  }, [])\n\n  return (\n    <div>\n      <video autoPlay ref={userVideo}></video>\n    </div>\n  )\n}\n\nexport default Room\n"]},"metadata":{},"sourceType":"module"}
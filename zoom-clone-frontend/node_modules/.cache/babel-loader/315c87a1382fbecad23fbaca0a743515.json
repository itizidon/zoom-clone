{"ast":null,"code":"var _jsxFileName = \"/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Rooms.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { withRouter } from 'react-router';\nconst socket = io('http://localhost:8000');\nlet mediaConstraints = {\n  audio: true,\n  // We want an audio track\n  video: true // ...and we want a video track\n\n};\nvar displayMediaOptions = {\n  video: {\n    cursor: 'always'\n  },\n  audio: false\n};\nlet myPeerConnection;\nlet userStream;\nlet sentTracks = [];\n\nfunction Rooms(props) {\n  const userVideo = useRef();\n  const [allVideos, setAllVideos] = useState({\n    listOfStreams: [React.createRef()],\n    curState: true\n  });\n  const [toggle, setToggle] = useState(true);\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz;\n      userStream = streamz;\n    });\n    socket.on('connectToRoom', () => {\n      joinroom();\n    });\n    socket.on('makeConnection', () => {\n      userStream.getTracks().forEach(track => sentTracks.push(myPeerConnection.addTrack(track, userStream)));\n    });\n    socket.on('handle-new-ice-candidate', candidate => {\n      if (candidate) {\n        const newCandidate = new RTCIceCandidate(candidate);\n        myPeerConnection.addIceCandidate(newCandidate);\n      }\n    });\n    socket.on('handle-answer-to-room', createdAnswer => {\n      const desc = new RTCSessionDescription(createdAnswer);\n      myPeerConnection.setRemoteDescription(desc);\n    });\n    socket.on('handle-offer-to-room', createdOffer => {\n      createPeerConnection();\n      var desc = new RTCSessionDescription(createdOffer);\n      myPeerConnection.setRemoteDescription(desc).then(stream => {\n        userStream.getTracks().forEach(track => {\n          sentTracks.push(myPeerConnection.addTrack(track, userStream));\n          return 'return';\n        });\n      }).then(() => {\n        return myPeerConnection.createAnswer();\n      }).then(function (answer) {\n        return myPeerConnection.setLocalDescription(answer);\n      }).then(() => {\n        socket.emit('video-answer-to-room', {\n          roomNum: props.match.params.id,\n          sdp: myPeerConnection.localDescription\n        });\n      });\n    });\n  }, []);\n\n  function handleTrackEvent(event) {\n    setAllVideos(oldArray => {\n      //if true\n      if (oldArray.curState) {\n        let newObj = {};\n        newObj.listOfStreams = oldArray.listOfStreams;\n        newObj.curState = false;\n        return newObj;\n      } else {\n        let newRef = React.createRef();\n        let newObj = {};\n        newObj.listOfStreams = oldArray.listOfStreams;\n        newObj.listOfStreams[newObj.listOfStreams.length - 1].current.srcObject = event.streams[0];\n        newObj.listOfStreams = [...oldArray.listOfStreams, newRef];\n        newObj.curState = true;\n        return newObj;\n      }\n    });\n  }\n\n  function createPeerConnection() {\n    myPeerConnection = new RTCPeerConnection({\n      iceServers: [{\n        urls: 'stun:stun3.l.google.com:19302'\n      }, {\n        urls: 'turn:numb.viagenie.ca',\n        credential: 'muazkh',\n        username: 'webrtc@live.com'\n      }],\n      sdpSemantics: 'unified-plan'\n    });\n    myPeerConnection.onicecandidate = handleICECandidateEvent;\n    myPeerConnection.ontrack = handleTrackEvent;\n    myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent;\n  }\n\n  function handleNegotiationNeededEvent() {\n    myPeerConnection.createOffer().then(function (offer) {\n      return myPeerConnection.setLocalDescription(offer);\n    }).then(() => {\n      socket.emit('video-offer-to-room', {\n        sdp: myPeerConnection.localDescription,\n        roomNum: props.match.params.id\n      });\n    });\n  }\n\n  function joinroom() {\n    createPeerConnection();\n  }\n\n  function handleICECandidateEvent(event) {\n    if (event.candidate) {\n      socket.emit('new-ice-candidate-to-room', {\n        roomNum: props.match.params.id,\n        candidate: event.candidate\n      });\n    }\n  }\n\n  console.log(allVideos, 'this is rerender addvideos');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }), allVideos.listOfStreams.length >= 1 ? allVideos.listOfStreams.map((cur, indx) => {\n    return /*#__PURE__*/React.createElement(\"video\", {\n      key: indx,\n      autoPlay: true,\n      ref: cur,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 20\n      }\n    });\n  }) : null, toggle ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      socket.emit('connectToRooms', props.match.params.id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, \"Connect\") : null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      console.log('this is run', sentTracks);\n      navigator.mediaDevices.getDisplayMedia(displayMediaOptions).then(videoStream => {\n        let screenVideo = videoStream.getTracks()[0];\n        console.log(screenVideo, 'tgus tii');\n        console.log(videoStream.getTracks()[0], 'this is what im looking for');\n        userVideo.current.srcObject = videoStream;\n        sentTracks.find(sender => {\n          return sender.track.kind === 'video';\n        }).replaceTrack(screenVideo);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, \"Share Screen\"));\n}\n\nexport default withRouter(Rooms);","map":{"version":3,"sources":["/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Rooms.js"],"names":["React","useEffect","useRef","useState","io","withRouter","socket","mediaConstraints","audio","video","displayMediaOptions","cursor","myPeerConnection","userStream","sentTracks","Rooms","props","userVideo","allVideos","setAllVideos","listOfStreams","createRef","curState","toggle","setToggle","navigator","mediaDevices","getUserMedia","then","streamz","current","srcObject","on","joinroom","getTracks","forEach","track","push","addTrack","candidate","newCandidate","RTCIceCandidate","addIceCandidate","createdAnswer","desc","RTCSessionDescription","setRemoteDescription","createdOffer","createPeerConnection","stream","createAnswer","answer","setLocalDescription","emit","roomNum","match","params","id","sdp","localDescription","handleTrackEvent","event","oldArray","newObj","newRef","length","streams","RTCPeerConnection","iceServers","urls","credential","username","sdpSemantics","onicecandidate","handleICECandidateEvent","ontrack","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","offer","console","log","map","cur","indx","getDisplayMedia","videoStream","screenVideo","find","sender","kind","replaceTrack"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport io from 'socket.io-client'\nimport { withRouter } from 'react-router'\n\nconst socket = io('http://localhost:8000')\n\nlet mediaConstraints = {\n  audio: true, // We want an audio track\n  video: true // ...and we want a video track\n}\n\nvar displayMediaOptions = {\n  video: {\n    cursor: 'always'\n  },\n  audio: false\n}\n\nlet myPeerConnection\nlet userStream\nlet sentTracks = []\n\nfunction Rooms(props) {\n  const userVideo = useRef()\n  const [allVideos, setAllVideos] = useState({\n    listOfStreams: [React.createRef()],\n    curState: true\n  })\n  const [toggle, setToggle] = useState(true)\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n      userVideo.current.srcObject = streamz\n      userStream = streamz\n    })\n\n    socket.on('connectToRoom', () => {\n      joinroom()\n    })\n\n    socket.on('makeConnection', () => {\n      userStream\n        .getTracks()\n        .forEach(track =>\n          sentTracks.push(myPeerConnection.addTrack(track, userStream))\n        )\n    })\n\n    socket.on('handle-new-ice-candidate', candidate => {\n      if (candidate) {\n        const newCandidate = new RTCIceCandidate(candidate)\n        myPeerConnection.addIceCandidate(newCandidate)\n      }\n    })\n\n    socket.on('handle-answer-to-room', createdAnswer => {\n      const desc = new RTCSessionDescription(createdAnswer)\n      myPeerConnection.setRemoteDescription(desc)\n    })\n\n    socket.on('handle-offer-to-room', createdOffer => {\n      createPeerConnection()\n      var desc = new RTCSessionDescription(createdOffer)\n\n      myPeerConnection\n        .setRemoteDescription(desc)\n        .then(stream => {\n          userStream.getTracks().forEach(track => {\n            sentTracks.push(myPeerConnection.addTrack(track, userStream))\n            return 'return'\n          })\n        })\n        .then(() => {\n          return myPeerConnection.createAnswer()\n        })\n        .then(function(answer) {\n          return myPeerConnection.setLocalDescription(answer)\n        })\n        .then(() => {\n          socket.emit('video-answer-to-room', {\n            roomNum: props.match.params.id,\n            sdp: myPeerConnection.localDescription\n          })\n        })\n    })\n  }, [])\n\n  function handleTrackEvent(event) {\n    setAllVideos(oldArray => {\n      //if true\n      if (oldArray.curState) {\n        let newObj = {}\n\n        newObj.listOfStreams = oldArray.listOfStreams\n        newObj.curState = false\n\n        return newObj\n      } else {\n        let newRef = React.createRef()\n        let newObj = {}\n\n        newObj.listOfStreams = oldArray.listOfStreams\n        newObj.listOfStreams[\n          newObj.listOfStreams.length - 1\n        ].current.srcObject = event.streams[0]\n\n        newObj.listOfStreams = [...oldArray.listOfStreams, newRef]\n        newObj.curState = true\n        return newObj\n      }\n    })\n  }\n\n  function createPeerConnection() {\n    myPeerConnection = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun3.l.google.com:19302' },\n        {\n          urls: 'turn:numb.viagenie.ca',\n          credential: 'muazkh',\n          username: 'webrtc@live.com'\n        }\n      ],\n      sdpSemantics: 'unified-plan'\n    })\n    myPeerConnection.onicecandidate = handleICECandidateEvent\n    myPeerConnection.ontrack = handleTrackEvent\n    myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent\n  }\n\n  function handleNegotiationNeededEvent() {\n    myPeerConnection\n      .createOffer()\n      .then(function(offer) {\n        return myPeerConnection.setLocalDescription(offer)\n      })\n      .then(() => {\n        socket.emit('video-offer-to-room', {\n          sdp: myPeerConnection.localDescription,\n          roomNum: props.match.params.id\n        })\n      })\n  }\n\n  function joinroom() {\n    createPeerConnection()\n  }\n\n  function handleICECandidateEvent(event) {\n    if (event.candidate) {\n      socket.emit('new-ice-candidate-to-room', {\n        roomNum: props.match.params.id,\n        candidate: event.candidate\n      })\n    }\n  }\n\n  console.log(allVideos, 'this is rerender addvideos')\n  return (\n    <div>\n      <video autoPlay ref={userVideo}></video>\n      {allVideos.listOfStreams.length >= 1\n        ? allVideos.listOfStreams.map((cur, indx) => {\n            return <video key={indx} autoPlay ref={cur}></video>\n          })\n        : null}\n      {toggle ? (\n        <button\n          onClick={() => {\n            socket.emit('connectToRooms', props.match.params.id)\n          }}\n        >\n          Connect\n        </button>\n      ) : null}\n      <button\n        onClick={() => {\n          console.log('this is run', sentTracks)\n          navigator.mediaDevices\n            .getDisplayMedia(displayMediaOptions)\n            .then(videoStream => {\n              let screenVideo = videoStream.getTracks()[0]\n              console.log(screenVideo, 'tgus tii')\n              console.log(\n                videoStream.getTracks()[0],\n                'this is what im looking for'\n              )\n              userVideo.current.srcObject = videoStream\n              sentTracks\n                .find(sender => {\n                  return sender.track.kind === 'video'\n                })\n                .replaceTrack(screenVideo)\n            })\n        }}\n      >\n        Share Screen\n      </button>\n    </div>\n  )\n}\n\nexport default withRouter(Rooms)\n"]},"metadata":{},"sourceType":"module"}
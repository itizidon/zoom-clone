{"ast":null,"code":"var _jsxFileName = \"/home/don/projects/zoom-clone/src/components/Room.js\";\nimport React, { useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nlet mediaConstraints = {\n  audio: true,\n  // We want an audio track\n  video: true // ...and we want a video track\n\n};\nconst socket = io('http://localhost:8000');\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints);\n};\n\nlet otherUser;\nlet myPeerConnection;\n\nfunction Room() {\n  const userVideo = useRef();\n  useEffect(() => {\n    socket.on('sentVideo', negotiation => {\n      otherUser = negotiation;\n    });\n\n    if (otherUser) {} else {\n      createPeerConnection();\n      navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n        userVideo.current.srcObject = streamz;\n        streamz.getTracks().forEach(track => myPeerConnection.addTrack(track, streamz));\n      });\n\n      function createPeerConnection() {\n        myPeerConnection = new RTCPeerConnection({\n          iceServers: [{\n            url: 'stun:stun1.l.google.com:19302'\n          }]\n        }); // myPeerConnection.onicecandidate = function handleICECandidateEvent(\n        //   event\n        // ) {\n        //   if (event.candidate) {\n        //     // sendToServer({\n        //     //   type: 'new-ice-candidate',\n        //     //   target: targetUsername,\n        //     //   candidate: event.candidate\n        //     // })\n        //   }\n        // }\n        // myPeerConnection.ontrack = function handleTrackEvent(event) {\n        //   document.getElementById('received_video').srcObject = event.streams[0]\n        //   document.getElementById('hangup-button').disabled = false\n        // }\n\n        myPeerConnection.onnegotiationneeded = function handleNegotiationNeededEvent() {\n          myPeerConnection.createOffer().then(function (offer) {\n            return myPeerConnection.setLocalDescription(offer);\n          }).then(() => {\n            socket.emit('video-offer', myPeerConnection.localDescription);\n          }); //socketio stuff\n        };\n      }\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Room;","map":{"version":3,"sources":["/home/don/projects/zoom-clone/src/components/Room.js"],"names":["React","useEffect","useRef","io","mediaConstraints","audio","video","socket","openMediaDevices","constraints","navigator","mediaDevices","getUserMedia","otherUser","myPeerConnection","Room","userVideo","on","negotiation","createPeerConnection","then","streamz","current","srcObject","getTracks","forEach","track","addTrack","RTCPeerConnection","iceServers","url","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","offer","setLocalDescription","emit","localDescription"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,IAAIC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,IADc;AACR;AACbC,EAAAA,KAAK,EAAE,IAFc,CAET;;AAFS,CAAvB;AAIA,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAD,CAAjB;;AAEA,MAAMK,gBAAgB,GAAG,MAAMC,WAAN,IAAqB;AAC5C,SAAO,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCH,WAApC,CAAb;AACD,CAFD;;AAIA,IAAII,SAAJ;AAEA,IAAIC,gBAAJ;;AAEA,SAASC,IAAT,GAAgB;AACd,QAAMC,SAAS,GAAGd,MAAM,EAAxB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,MAAM,CAACU,EAAP,CAAU,WAAV,EAAuBC,WAAW,IAAI;AACpCL,MAAAA,SAAS,GAAGK,WAAZ;AACD,KAFD;;AAIA,QAAIL,SAAJ,EAAe,CACd,CADD,MACO;AACLM,MAAAA,oBAAoB;AAEpBT,MAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCR,gBAApC,EAAsDgB,IAAtD,CAA2DC,OAAO,IAAI;AACpEL,QAAAA,SAAS,CAACM,OAAV,CAAkBC,SAAlB,GAA8BF,OAA9B;AACAA,QAAAA,OAAO,CACJG,SADH,GAEGC,OAFH,CAEWC,KAAK,IAAIZ,gBAAgB,CAACa,QAAjB,CAA0BD,KAA1B,EAAiCL,OAAjC,CAFpB;AAGD,OALD;;AAOA,eAASF,oBAAT,GAAgC;AAC9BL,QAAAA,gBAAgB,GAAG,IAAIc,iBAAJ,CAAsB;AACvCC,UAAAA,UAAU,EAAE,CAAC;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAAD;AAD2B,SAAtB,CAAnB,CAD8B,CAI9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAhB,QAAAA,gBAAgB,CAACiB,mBAAjB,GAAuC,SAASC,4BAAT,GAAwC;AAC7ElB,UAAAA,gBAAgB,CACbmB,WADH,GAEGb,IAFH,CAEQ,UAASc,KAAT,EAAgB;AACpB,mBAAOpB,gBAAgB,CAACqB,mBAAjB,CAAqCD,KAArC,CAAP;AACD,WAJH,EAKGd,IALH,CAKQ,MAAM;AACVb,YAAAA,MAAM,CAAC6B,IAAP,CAAY,aAAZ,EAA2BtB,gBAAgB,CAACuB,gBAA5C;AACD,WAPH,EAD6E,CAS7E;AACD,SAVD;AAWD;AACF;AACF,GAhDQ,EAgDN,EAhDM,CAAT;AAkDA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,GAAG,EAAErB,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,eAAeD,IAAf","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport io from 'socket.io-client'\n\nlet mediaConstraints = {\n  audio: true, // We want an audio track\n  video: true // ...and we want a video track\n}\nconst socket = io('http://localhost:8000')\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints)\n}\n\nlet otherUser\n\nlet myPeerConnection\n\nfunction Room() {\n  const userVideo = useRef()\n  useEffect(() => {\n    socket.on('sentVideo', negotiation => {\n      otherUser = negotiation\n    })\n\n    if (otherUser) {\n    } else {\n      createPeerConnection()\n\n      navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n        userVideo.current.srcObject = streamz\n        streamz\n          .getTracks()\n          .forEach(track => myPeerConnection.addTrack(track, streamz))\n      })\n\n      function createPeerConnection() {\n        myPeerConnection = new RTCPeerConnection({\n          iceServers: [{ url: 'stun:stun1.l.google.com:19302' }]\n        })\n        // myPeerConnection.onicecandidate = function handleICECandidateEvent(\n        //   event\n        // ) {\n        //   if (event.candidate) {\n        //     // sendToServer({\n        //     //   type: 'new-ice-candidate',\n        //     //   target: targetUsername,\n        //     //   candidate: event.candidate\n        //     // })\n        //   }\n        // }\n        // myPeerConnection.ontrack = function handleTrackEvent(event) {\n        //   document.getElementById('received_video').srcObject = event.streams[0]\n        //   document.getElementById('hangup-button').disabled = false\n        // }\n        myPeerConnection.onnegotiationneeded = function handleNegotiationNeededEvent() {\n          myPeerConnection\n            .createOffer()\n            .then(function(offer) {\n              return myPeerConnection.setLocalDescription(offer)\n            })\n            .then(() => {\n              socket.emit('video-offer', myPeerConnection.localDescription)\n            })\n          //socketio stuff\n        }\n      }\n    }\n  }, [])\n\n  return (\n    <div>\n      <video autoPlay ref={userVideo}></video>\n    </div>\n  )\n}\n\nexport default Room\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/don/projects/zoom-clone/src/components/Room.js\";\nimport React, { useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nlet mediaConstraints = {\n  audio: true,\n  // We want an audio track\n  video: true // ...and we want a video track\n\n};\nconst socket = io('http://localhost:8000');\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints);\n};\n\nlet stream;\nlet sdp;\nlet myPeerConnection;\n\nfunction Room() {\n  const userVideo = useRef();\n  useEffect(() => {\n    createPeerConnection();\n    console.log(openMediaDevices(mediaConstraints));\n    userVideo.current.srcObject = navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => console.log(streamz));\n\n    function createPeerConnection() {// myPeerConnection = new RTCPeerConnection({\n      //   iceServers: [\n      //     {\n      //       urls: 'stun.l.google.com:19302'\n      //     }\n      //   ]\n      // })\n      // myPeerConnection.onicecandidate = function handleICECandidateEvent(\n      //   event\n      // ) {\n      //   if (event.candidate) {\n      //     // sendToServer({\n      //     //   type: 'new-ice-candidate',\n      //     //   target: targetUsername,\n      //     //   candidate: event.candidate\n      //     // })\n      //   }\n      // }\n      // myPeerConnection.ontrack = function handleTrackEvent(event) {\n      //   document.getElementById('received_video').srcObject = event.streams[0]\n      //   document.getElementById('hangup-button').disabled = false\n      // }\n      // myPeerConnection.onnegotiationneeded = function handleNegotiationNeededEvent() {\n      //   myPeerConnection.createOffer().then(function(offer) {\n      //     return myPeerConnection.setLocalDescription(offer)\n      //   })\n      // }\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Room;","map":{"version":3,"sources":["/home/don/projects/zoom-clone/src/components/Room.js"],"names":["React","useEffect","useRef","io","mediaConstraints","audio","video","socket","openMediaDevices","constraints","navigator","mediaDevices","getUserMedia","stream","sdp","myPeerConnection","Room","userVideo","createPeerConnection","console","log","current","srcObject","then","streamz"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,IAAIC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,IADc;AACR;AACbC,EAAAA,KAAK,EAAE,IAFc,CAET;;AAFS,CAAvB;AAIA,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAD,CAAjB;;AAEA,MAAMK,gBAAgB,GAAG,MAAMC,WAAN,IAAqB;AAC5C,SAAO,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCH,WAApC,CAAb;AACD,CAFD;;AAIA,IAAII,MAAJ;AACA,IAAIC,GAAJ;AAEA,IAAIC,gBAAJ;;AAEA,SAASC,IAAT,GAAgB;AACd,QAAMC,SAAS,GAAGf,MAAM,EAAxB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,oBAAoB;AAEpBC,IAAAA,OAAO,CAACC,GAAR,CAAYZ,gBAAgB,CAACJ,gBAAD,CAA5B;AAEAa,IAAAA,SAAS,CAACI,OAAV,CAAkBC,SAAlB,GAA8BZ,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCR,gBAApC,EAAsDmB,IAAtD,CAA4DC,OAAD,IAAYL,OAAO,CAACC,GAAR,CAAYI,OAAZ,CAAvE,CAA9B;;AAEA,aAASN,oBAAT,GAAgC,CAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACD;AACF,GAvCQ,EAuCN,EAvCM,CAAT;AAyCA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,GAAG,EAAED,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,eAAeD,IAAf","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport io from 'socket.io-client'\n\nlet mediaConstraints = {\n  audio: true, // We want an audio track\n  video: true // ...and we want a video track\n};\nconst socket = io('http://localhost:8000')\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints)\n}\n\nlet stream\nlet sdp\n\nlet myPeerConnection\n\nfunction Room() {\n  const userVideo = useRef()\n  useEffect(() => {\n    createPeerConnection()\n\n    console.log(openMediaDevices(mediaConstraints))\n\n    userVideo.current.srcObject = navigator.mediaDevices.getUserMedia(mediaConstraints).then((streamz)=> console.log(streamz))\n\n    function createPeerConnection() {\n      // myPeerConnection = new RTCPeerConnection({\n      //   iceServers: [\n      //     {\n      //       urls: 'stun.l.google.com:19302'\n      //     }\n      //   ]\n      // })\n\n      // myPeerConnection.onicecandidate = function handleICECandidateEvent(\n      //   event\n      // ) {\n      //   if (event.candidate) {\n      //     // sendToServer({\n      //     //   type: 'new-ice-candidate',\n      //     //   target: targetUsername,\n      //     //   candidate: event.candidate\n      //     // })\n      //   }\n      // }\n\n      // myPeerConnection.ontrack = function handleTrackEvent(event) {\n      //   document.getElementById('received_video').srcObject = event.streams[0]\n      //   document.getElementById('hangup-button').disabled = false\n      // }\n\n      // myPeerConnection.onnegotiationneeded = function handleNegotiationNeededEvent() {\n      //   myPeerConnection.createOffer().then(function(offer) {\n      //     return myPeerConnection.setLocalDescription(offer)\n      //   })\n      // }\n    }\n  }, [])\n\n  return (\n    <div>\n      <video autoPlay ref={userVideo}></video>\n    </div>\n  )\n}\n\nexport default Room\n"]},"metadata":{},"sourceType":"module"}
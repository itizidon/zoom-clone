{"ast":null,"code":"var _jsxFileName = \"/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Room.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nlet mediaConstraints = {\n  audio: true,\n  // We want an audio track\n  video: true // ...and we want a video track\n\n};\nconst socket = io('http://localhost:8000');\nlet myPeerConnection;\nlet userStream;\nlet displayMediaOptions = {\n  video: {\n    cursor: 'always'\n  },\n  audio: false\n};\n\nfunction Room() {\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n  const myScreen = useRef();\n  const [toggle, setToggle] = useState(true);\n  useEffect(() => {\n    navigator.mediaDevices.getDisplayMedia(displayMediaOptions).then(display => {\n      myScreen.current.srcObject = display;\n    });\n    socket.on('first guy', () => {\n      joinroom();\n    });\n    socket.on('createConnection', () => {\n      userStream.getTracks().forEach(track => myPeerConnection.addTrack(track, userStream));\n    });\n\n    function joinroom() {\n      createPeerConnection();\n      navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n        userVideo.current.srcObject = streamz;\n        userStream = streamz;\n      });\n    }\n\n    socket.on('handle-new-ice-candidate', candidate => {\n      if (candidate) {\n        const newCandidate = new RTCIceCandidate(candidate);\n        myPeerConnection.addIceCandidate(newCandidate);\n      }\n    });\n    socket.on('handle-video-offer', createdOffer => {\n      createPeerConnection();\n      var localStream;\n      var desc = new RTCSessionDescription(createdOffer);\n      myPeerConnection.setRemoteDescription(desc).then(() => {\n        return navigator.mediaDevices.getUserMedia(mediaConstraints);\n      }).then(stream => {\n        localStream = stream;\n        userVideo.current.srcObject = localStream;\n        localStream.getTracks().forEach(track => myPeerConnection.addTrack(track, localStream));\n      }).then(() => {\n        return myPeerConnection.createAnswer();\n      }).then(function (answer) {\n        return myPeerConnection.setLocalDescription(answer);\n      }).then(() => {\n        socket.emit('video-answer', myPeerConnection.localDescription);\n      });\n    });\n    socket.on('handle-video-answer', createdAnswer => {\n      const desc = new RTCSessionDescription(createdAnswer);\n      myPeerConnection.setRemoteDescription(desc);\n    });\n\n    function createPeerConnection() {\n      myPeerConnection = new RTCPeerConnection({\n        iceServers: [{\n          urls: 'stun:stun3.l.google.com:19302'\n        }, {\n          urls: 'turn:numb.viagenie.ca',\n          credential: 'muazkh',\n          username: 'webrtc@live.com'\n        }]\n      });\n      myPeerConnection.onicecandidate = handleICECandidateEvent;\n      myPeerConnection.ontrack = handleTrackEvent;\n      myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent;\n    }\n\n    function handleICECandidateEvent(event) {\n      socket.emit('new-ice-candidate', event.candidate);\n    }\n\n    function handleTrackEvent(event) {\n      partnerVideo.current.srcObject = event.streams[0];\n    }\n\n    function handleNegotiationNeededEvent() {\n      myPeerConnection.createOffer().then(function (offer) {\n        return myPeerConnection.setLocalDescription(offer);\n      }).then(() => {\n        socket.emit('video-offer', myPeerConnection.localDescription);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, toggle ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      socket.emit('join room');\n      setToggle(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Connect\") : null, /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: partnerVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: myScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Room;","map":{"version":3,"sources":["/home/don/projects/zoom-clone/zoom-clone-frontend/src/components/Room.js"],"names":["React","useEffect","useRef","useState","io","mediaConstraints","audio","video","socket","myPeerConnection","userStream","displayMediaOptions","cursor","Room","userVideo","partnerVideo","myScreen","toggle","setToggle","navigator","mediaDevices","getDisplayMedia","then","display","current","srcObject","on","joinroom","getTracks","forEach","track","addTrack","createPeerConnection","getUserMedia","streamz","candidate","newCandidate","RTCIceCandidate","addIceCandidate","createdOffer","localStream","desc","RTCSessionDescription","setRemoteDescription","stream","createAnswer","answer","setLocalDescription","emit","localDescription","createdAnswer","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","ontrack","handleTrackEvent","onnegotiationneeded","handleNegotiationNeededEvent","event","streams","createOffer","offer"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport io from 'socket.io-client'\n\nlet mediaConstraints = {\n  audio: true, // We want an audio track\n  video: true // ...and we want a video track\n}\nconst socket = io('http://localhost:8000')\n\nlet myPeerConnection\nlet userStream\n\nlet displayMediaOptions = {\n  video: {\n    cursor: 'always'\n  },\n  audio: false\n}\n\nfunction Room() {\n  const userVideo = useRef()\n  const partnerVideo = useRef()\n  const myScreen = useRef()\n  const [toggle, setToggle] = useState(true)\n\n  useEffect(() => {\n    navigator.mediaDevices\n      .getDisplayMedia(displayMediaOptions)\n      .then(display => {\n        myScreen.current.srcObject = display\n      })\n    socket.on('first guy', () => {\n      joinroom()\n    })\n\n    socket.on('createConnection', () => {\n      userStream\n        .getTracks()\n        .forEach(track => myPeerConnection.addTrack(track, userStream))\n    })\n\n    function joinroom() {\n      createPeerConnection()\n      navigator.mediaDevices.getUserMedia(mediaConstraints).then(streamz => {\n        userVideo.current.srcObject = streamz\n        userStream = streamz\n      })\n    }\n\n    socket.on('handle-new-ice-candidate', candidate => {\n      if (candidate) {\n        const newCandidate = new RTCIceCandidate(candidate)\n        myPeerConnection.addIceCandidate(newCandidate)\n      }\n    })\n\n    socket.on('handle-video-offer', createdOffer => {\n      createPeerConnection()\n      var localStream\n      var desc = new RTCSessionDescription(createdOffer)\n\n      myPeerConnection\n        .setRemoteDescription(desc)\n        .then(() => {\n          return navigator.mediaDevices.getUserMedia(mediaConstraints)\n        })\n        .then(stream => {\n          localStream = stream\n          userVideo.current.srcObject = localStream\n\n          localStream\n            .getTracks()\n            .forEach(track => myPeerConnection.addTrack(track, localStream))\n        })\n        .then(() => {\n          return myPeerConnection.createAnswer()\n        })\n        .then(function(answer) {\n          return myPeerConnection.setLocalDescription(answer)\n        })\n        .then(() => {\n          socket.emit('video-answer', myPeerConnection.localDescription)\n        })\n    })\n\n    socket.on('handle-video-answer', createdAnswer => {\n      const desc = new RTCSessionDescription(createdAnswer)\n      myPeerConnection.setRemoteDescription(desc)\n    })\n\n    function createPeerConnection() {\n      myPeerConnection = new RTCPeerConnection({\n        iceServers: [\n          { urls: 'stun:stun3.l.google.com:19302' },\n          {\n            urls: 'turn:numb.viagenie.ca',\n            credential: 'muazkh',\n            username: 'webrtc@live.com'\n          }\n        ]\n      })\n\n      myPeerConnection.onicecandidate = handleICECandidateEvent\n      myPeerConnection.ontrack = handleTrackEvent\n      myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent\n    }\n\n    function handleICECandidateEvent(event) {\n      socket.emit('new-ice-candidate', event.candidate)\n    }\n\n    function handleTrackEvent(event) {\n      partnerVideo.current.srcObject = event.streams[0]\n    }\n\n    function handleNegotiationNeededEvent() {\n      myPeerConnection\n        .createOffer()\n        .then(function(offer) {\n          return myPeerConnection.setLocalDescription(offer)\n        })\n        .then(() => {\n          socket.emit('video-offer', myPeerConnection.localDescription)\n        })\n    }\n  }, [])\n\n  return (\n    <div>\n      {toggle ? (\n        <button\n          onClick={() => {\n            socket.emit('join room')\n            setToggle(false)\n          }}\n        >\n          Connect\n        </button>\n      ) : null}\n\n      <video autoPlay ref={userVideo}></video>\n      <video autoPlay ref={partnerVideo}></video>\n      <video autoPlay ref={myScreen}></video>\n    </div>\n  )\n}\n\nexport default Room\n"]},"metadata":{},"sourceType":"module"}